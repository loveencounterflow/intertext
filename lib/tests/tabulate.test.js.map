{
  "version": 3,
  "file": "tabulate.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/tabulate.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/TESTS/TABULATE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ is_empty\n  copy\n  assign\n  jr }                    = CND\n# PATH                      = require 'path'\n# FS                        = require 'fs'\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\ntypes                     = ( require '../..' ).types\n{ isa\n  validate\n  cast\n  last_of\n  type_of }               = types\n\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_xxx_kw_demo = -> new Promise ( resolve ) =>\n  SP                        = require 'steampipes'\n  { $\n    $async\n    $watch\n    $show\n    $drain }                = SP.export()\n  TBL                       = ( require '../..' ).TBL\n  source                    = [ ( Array.from 'abcdefg' ), [ 1e6 .. 1e6 + 7 ], ]\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push source\n  pipeline.push TBL.$tabulate()\n  pipeline.push $watch ( d ) -> echo d.text\n  pipeline.push $drain ( result ) -> resolve result\n  SP.pull pipeline...\n  resolve()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ( T, done ) -> new Promise ( resolve ) =>\n  SP                        = require 'steampipes'\n  { $\n    $async\n    $watch\n    $show\n    $drain }                = SP.export()\n  #...........................................................................................................\n  TBL                 = ( require '../..' ).TBL\n  probes_and_matchers = [\n    [\n      [ ( Array.from 'abcdefg' ), [ 1e6 .. 1e6 + 7 ], ]\n      [ {\"text\":\"┌──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\",\"$key\":\"^table\"},\n        {\"text\":\"│ 0            │ 1            │ 2            │ 3            │ 4            │ 5            │ 6            │\",\"$key\":\"^table\"},\n        {\"text\":\"├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\",\"$key\":\"^table\"},\n        {\"text\":\"│ a            │ b            │ c            │ d            │ e            │ f            │ g            │\",\"$key\":\"^table\"},\n        {\"text\":\"│ 1000000      │ 1000001      │ 1000002      │ 1000003      │ 1000004      │ 1000005      │ 1000006      │\",\"$key\":\"^table\"},\n        {\"text\":\"└──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\",\"$key\":\"^table\"},\n        ], ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      pipeline = []\n      pipeline.push probe\n      pipeline.push TBL.$tabulate()\n      pipeline.push $watch ( d ) -> echo d.text\n      pipeline.push $drain ( result ) -> resolve result\n      SP.pull pipeline...\n  #.........................................................................................................\n  done() if done?\n  resolve()\n  return null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await @_xxx_kw_demo()\n  test @\n  # test @[ \"demo\" ]\n\n"
  ]
}