{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/re.coffee"
  ],
  "names": [],
  "mappings": "AAAM;EAAA;AAAA,MAAA,GAAA,EAAA,QAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA,EAAA;;EAEN,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZtB;;;EAcN,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,CAAA,GAE4B,KAF5B;;EAGA,CAAA,CAAE,QAAF,EAAY,QAAZ,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B;;EACA,QAAA,GAA4B,OAAA,CAAQ,UAAR;;EAItB;;IAAN,MAAA,GAAA,QAAiB,SAAjB,CAAA;;MAIE,WAAa,CAAE,WAAW,IAAb,CAAA;aACX,CAAA;QACA,IAAC,CAAA,QAAD,GAAY,CAAE,GAAA,IAAC,CAAA,SAAH,EAAiB,GAAA,QAAjB;AACZ,eAAO;MAHI,CAHf;;;MASW,OAAR,MAAQ,CAAE,IAAF,CAAA,EAAA;;;;AAIP,eAAO,IAAI,CAAC,OAAL,CAAa,4BAAb,EAA2C,MAA3C;MAJA,CATX;;;MAgBiB,OAAd,YAAc,CAAE,IAAF,EAAQ,QAAQ,IAAhB,CAAA;AACb,eAAO,IAAI,MAAJ,CAAa,IAAC,CAAA,MAAD,CAAQ,IAAR,CAAb,kBAA6B,QAAQ,GAArC;MADM;;IAjBjB;;iBACE,SAAA,GAAW,CAAA;;;;gBAxBP;;;EA8CN,MAAM,CAAC,OAAP,GAAiB,IAAI,EAAJ,CAAA,EA9CX;;;EAkDN,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,IAAlC;;AAlDM",
  "sourcesContent": [
    "#!node\n\nCND                       = require 'cnd'\nbadge                     = 'INTERTEXT/RE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  type_of  }              = types\n{ to_width, width_of, }   = require 'to-width'\nMultimix                  = require 'multimix'\n\n\n#-----------------------------------------------------------------------------------------------------------\nclass Re extends Multimix\n  _defaults: {}\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null) ->\n    super()\n    @settings = { @_defaults..., settings..., }\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  @escape: ( text ) ->\n    ### Given a `text`, return the same with all regular expression metacharacters properly escaped. Escaped\n    characters are `[]{}()*+?-.,\\^$|#` plus whitespace. ###\n    #.......................................................................................................\n    return text.replace /[-[\\]{}()*+?.,\\\\\\/^$|#\\s]/g, \"\\\\$&\"\n\n  #---------------------------------------------------------------------------------------------------------\n  @re_from_text: ( text, flags = null ) ->\n    return new RegExp ( @escape text ), flags ? 'g'\n\n\n\n############################################################################################################\nmodule.exports = new Re()\n\n\n############################################################################################################\nif module is require.main then do =>\n\n\n"
  ]
}