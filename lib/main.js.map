{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nMultimix                  = require 'multimix'\n{ assign\n  jr }                    = CND\n@types                    = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = @types\nMultimix                  = require 'multimix'\n{ inspect }               = require 'util'\n\n###\n#...........................................................................................................\n_format                   = require 'number-format.js'\nformat_float              = ( x ) -> _format '#,##0.000', x\nformat_integer            = ( x ) -> _format '#,##0.',    x\nformat_as_percentage      = ( x ) -> _format '#,##0.00',  x * 100\n###\n\n#-----------------------------------------------------------------------------------------------------------\nclass Html extends Multimix\n  @include require './html'\n\n#-----------------------------------------------------------------------------------------------------------\nclass Hyph extends Multimix\n  @include require './hyphenation'\n\n#-----------------------------------------------------------------------------------------------------------\nclass Ucd extends Multimix\n  @include require './ucd'\n\n#-----------------------------------------------------------------------------------------------------------\nclass Slabs extends Multimix\n  @include require './slabs'\n\n#-----------------------------------------------------------------------------------------------------------\nclass Patterns extends Multimix\n  @include require './_patterns'\n\n#-----------------------------------------------------------------------------------------------------------\nclass Tbl extends Multimix\n  @include require './tabulate'\n\n#-----------------------------------------------------------------------------------------------------------\n@get_terminal_size = -> ( require 'term-size' )()\n\n#-----------------------------------------------------------------------------------------------------------\n@rpr = ( P... ) ->\n  return ( ( inspect x, @rpr_settings ) for x in P ).join ' '\n\n#-----------------------------------------------------------------------------------------------------------\n@camelize = ( text ) ->\n  ### thx to https://github.com/lodash/lodash/blob/master/camelCase.js ###\n  words = text.split '-'\n  for idx in [ 1 ... words.length ] by +1\n    word = words[ idx ]\n    continue if word is ''\n    words[ idx ] = word[ 0 ].toUpperCase() + word[ 1 .. ]\n  return words.join ''\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @\nclass Intertext extends Multimix\n  @include MAIN,                              { overwrite: false, }\n  # @extend MAIN, { overwrite: false, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( target = null ) ->\n    super()\n    @HTML         = new Html()\n    @HYPH         = new Hyph()\n    @UCD          = new Ucd()\n    @SLABS        = new Slabs()\n    @_PATTERNS    = new Patterns()\n    @TBL          = new Tbl()\n    @rpr_settings =\n      depth:          Infinity\n      maxArrayLength: Infinity\n      breakLength:    Infinity\n      compact:        true\n    @export target if target?\n    return @\n\nmodule.exports = INTERTEXT = new Intertext()\n\n\n############################################################################################################\nif module is require.main then do =>\n  null\n\n\n"
  ]
}