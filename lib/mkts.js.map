{
  "version": 3,
  "file": "mkts.js",
  "sourceRoot": "..",
  "sources": [
    "src/mkts.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/MKTS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\nDATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n{ new_datom\n  lets\n  select }                = DATOM.export()\ntypes                     = require './types'\n{ isa\n  validate\n  # cast\n  # declare\n  # declare_cast\n  # check\n  # sad\n  # is_sad\n  # is_happy\n  type_of }               = types\n#...........................................................................................................\nHtmlParser                = require 'atlas-html-stream'\nassign                    = Object.assign\nHTML                      = null\n\n#-----------------------------------------------------------------------------------------------------------\n@html_from_datoms  = ( P... ) => ( HTML ?= ( require '..' ).HTML ).html_from_datoms  P...\n@$html_from_datoms = ( P... ) => ( HTML ?= ( require '..' ).HTML ).$html_from_datoms P...\n\n\n#===========================================================================================================\n# PARSING\n#-----------------------------------------------------------------------------------------------------------\n@_find_next_tag = ( text, prv_idx = 0 ) ->\n  idx_0 = text.indexOf '<', prv_idx\n  idx_1 = text.indexOf '>', prv_idx\n  if ( idx_0 < 0 )\n    return [ null, null, ] if ( idx_1 < 0 )\n    throw new Error \"Syntax error: closing but no opening bracket\"\n  throw new Error \"Syntax error: opening but no closing bracket\"                if ( idx_1 < 0 )\n  throw new Error \"Syntax error: closing before opening bracket\"                if ( idx_1 < idx_0 )\n  throw new Error \"Syntax error: closing bracket too close to opening bracket\"  if ( idx_1 < idx_0 + 2 )\n  throw new Error \"Syntax error: whitespace not allowed here\"                   if /\\s/.test text[ idx_0 + 1 ]\n  idx_2 = text.indexOf '<', idx_0 + 1\n  throw new Error \"Syntax error: additional opening bracket\"                    if ( 0 < idx_2 < idx_1 )\n  return [ idx_0, idx_1, ]\n\n#-----------------------------------------------------------------------------------------------------------\n@datoms_from_html = ( text ) ->\n  R         = []\n  prv_idx   = 0\n  prv_idx_1 = -1\n  HTML     ?= ( require '..' ).HTML\n  #.........................................................................................................\n  loop\n    #.......................................................................................................\n    try\n      [ idx_0, idx_1, ] = @_find_next_tag text, prv_idx\n    catch error\n      throw error unless /Syntax error/.test error.message\n      source = text[ prv_idx .. ]\n      R.push new_datom '~error', {\n        message:  \"#{error.message}: #{jr source}\",\n        type:     'mkts-syntax-html',\n        source:   source, }\n      return R\n    #.......................................................................................................\n    if idx_0 > prv_idx_1 + 1\n      R.push new_datom '^text', { text: text[ prv_idx_1 + 1 ... idx_0 ].toString(), }\n    break unless idx_0?\n    tags = HTML._analyze_compact_tag_syntax HTML.datoms_from_html text[ idx_0 .. idx_1 ]\n    if text[ idx_1 - 1 ] is '/'\n      R.push d = lets tags[ 0 ], ( d ) -> d.$key = '^' + d.$key[ 1 .. ]\n    else\n      R.push tags...\n    prv_idx_1 = idx_1\n    prv_idx   = idx_1 + 1\n  #.........................................................................................................\n  # debug '7776^', rpr { prv_idx, prv_idx_1, idx_0, idx_1, length: text.length, }\n  if prv_idx < text.length\n      R.push new_datom '^text', { text: text[ prv_idx_1 + 1 .. ].toString(), }\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@$datoms_from_html = ->\n  { $, } = ( require 'steampipes' ).export()\n  return $ ( buffer_or_text, send ) =>\n    send d for d in @datoms_from_html buffer_or_text\n    return null\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  help 'ok'\n\n\n###\n\n# #-----------------------------------------------------------------------------------------------------------\n# @html5_block_level_tagnames = new Set \"\"\"address article aside blockquote dd details dialog div dl dt\n# fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hgroup hr li main nav ol p pre section table\n# td th ul\"\"\".split /\\s+/\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_new_datom = ( name, data, text ) ->\n#   return new_datom '^text', { text, } if text?\n#   #.........................................................................................................\n#   is_block = @html5_block_level_tagnames.has name\n#   unless data?\n#     return new_datom '>' + name unless is_block\n#     return new_datom '>' + name, { is_block, }\n#   #.........................................................................................................\n#   has_keys = false\n#   for key, value of data\n#     has_keys    = true\n#     data[ key ] = true if value is ''\n#   #.........................................................................................................\n#   unless has_keys\n#     return new_datom '<' + name unless is_block\n#     return new_datom '<' + name, { is_block, }\n#   #.........................................................................................................\n#   return new_datom '<' + name, { data, } unless is_block\n#   return new_datom '<' + name, { data, is_block, }\n\n#-----------------------------------------------------------------------------------------------------------\n# @_new_parse_method = ( piecemeal ) ->\n#   R       = null\n#   parser  = new HtmlParser { preserveWS: true, }\n#   #.........................................................................................................\n#   parser.on 'data', ( { name, data, text, } ) => R.push @_new_datom name, data, text\n#   parser.on 'error', ( error ) -> throw error\n#   # parser.on 'end', -> R.push new_datom '^stop'\n#   #.........................................................................................................\n#   R = ( html ) =>\n#     R = []\n#     parser.write html\n#     unless piecemeal\n#       parser.flushText()\n#       parser.reset()\n#     return R\n#   #.........................................................................................................\n#   R.flush = -> parser.flushText()\n#   R.reset = -> parser.reset()\n#   return R\n\n#-----------------------------------------------------------------------------------------------------------\nclass Htmlparser extends Multimix\n  # @extend   object_with_class_properties\n  @include L\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( @settings = null ) ->\n    super()\n\n###"
  ]
}