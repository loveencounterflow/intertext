{
  "version": 3,
  "file": "tabulate.js",
  "sourceRoot": "..",
  "sources": [
    "src/tabulate.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/TBL'\n# log                       = CND.get_logger 'plain',     badge\n# info                      = CND.get_logger 'info',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\n# echo                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  last_of\n  type_of }               = types\nSP                        = require 'steampipes'\n{ $\n  $async\n  $watch\n  $show\n  $drain }                = SP.export()\n{ jr, }                   = CND\nDATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n{ new_datom\n  wrap_datom\n  lets\n  freeze\n  select }                = DATOM.export()\n{ to_width, width_of, }   = require 'to-width'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$tabulate = ( settings = {} ) ->\n  S = _new_state settings\n  #.........................................................................................................\n  pipeline = [\n    $as_event           S\n    $set_widths_etc     S\n    $dividers_top       S\n    $dividers_bottom    S\n    $as_row             S\n    $cleanup            S\n    ]\n  #.........................................................................................................\n  return SP.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@$show_table = ( settings ) ->\n  throw new Error \"not implemented\"\n\n#-----------------------------------------------------------------------------------------------------------\n_new_state = ( settings ) ->\n  S = {}\n  ### TAINT use intertype ###\n  # validate_keys \"settings\", \"one or more out of\", ( Object.keys settings ), keys_toplevel\n  #.........................................................................................................\n  settings           ?=       {}\n  S.width             =       settings[ 'width'       ] ? null\n  S.alignment         =       settings[ 'alignment'   ] ? 'left'\n  S.fit               =       settings[ 'fit'         ] ? null\n  S.ellipsis          =       settings[ 'ellipsis'    ] ? '…'\n  S.pad               =       settings[ 'pad'         ] ? ''\n  S.overflow          =       settings[ 'overflow'    ] ? 'show'\n  S.alignment         =       settings[ 'alignment'   ] ? 'left'\n  S.multiline         =       settings[ 'multiline'   ] ? false\n  S.format            =       settings[ 'format'      ] ? null\n  #.........................................................................................................\n  S.widths            = copy  settings[ 'widths'      ] ? []\n  S.alignments        =       settings[ 'alignments'  ] ? []\n  S.headings          =       settings[ 'headings'    ] ? yes\n  S.keys              =       settings[ 'keys'        ] ? null\n  S.box               = copy  settings[ 'box'         ] ? copy boxes[ 'plain' ]\n  #.........................................................................................................\n  S.pad               = ( ' '.repeat S.pad ) if CND.isa_number S.pad\n  #.........................................................................................................\n  S.box               = box_style = boxes[ S.box ] if CND.isa_text S.box\n  throw new Error \"unknown box style #{rpr box_style}\" unless S.box?\n  #.........................................................................................................\n  S.box.left          =         S.box.vs + S.pad\n  S.box.center        = S.pad + S.box.vs + S.pad\n  S.box.right         = S.pad + S.box.vs\n  S.box.left_width    = width_of S.box.left\n  S.box.center_width  = width_of S.box.center\n  S.box.right_width   = width_of S.box.right\n  #.........................................................................................................\n  ### TAINT use intertype ###\n  # validate_keys \"alignment\", \"one of\", [ S.alignment, ], values_alignment\n  # validate_keys \"overflow\",  \"one of\", [ S.overflow,  ], values_overflow\n  if settings.format? and ( type = type_of settings.format ) isnt 'function'\n    throw new Error \"expected function for format, got a #{type}\"\n  #.........................................................................................................\n  if S.overflow isnt 'show' then throw new Error \"setting 'overflow' not yet supported\"\n  if S.fit?                 then throw new Error \"setting 'fit' not yet supported\"\n  #.........................................................................................................\n  ### TAINT use intertype ###\n  ### TAINT check widths etc. are non-zero integers ###\n  ### TAINT check values in headings, widths, keys (?) ###\n  #.........................................................................................................\n  return S\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use intertype ###\nkeys_toplevel     = [\n  'alignment'\n  'alignments'\n  'box'\n  'default'\n  'ellipsis'\n  'fit'\n  'headings'\n  'keys'\n  'overflow'\n  'pad'\n  'width'\n  'widths'\n  ]\nvalues_overflow   = [ 'show',  'hide', ]\nvalues_alignment  = [ 'left',  'right', 'center', ]\n\n#-----------------------------------------------------------------------------------------------------------\n$set_widths_etc = ( S ) ->\n  is_first = true\n  return $ ( d, send ) ->\n    return send d unless is_first\n    return send d unless select d, '^data'\n    is_first = false\n    { data, } = d\n    #...................................................................................................\n    unless S.keys?\n      if      isa.list    data  then S.keys = ( idx for _, idx  in data )\n      else if isa.object  data  then S.keys = ( key for key     of data )\n      else throw new Error \"^intertext/tabulate/set_widths_etc@1^ expected a list or an object, got a #{CND.type_of data}\"\n    S.headings = S.keys if S.headings is true\n    #...................................................................................................\n    unless S.width?\n      { columns: terminal_width, } = ( require '..' ).get_terminal_size()\n      ### TAINT correction varies with border style ###\n      S.width = Math.max 10, ( Math.floor terminal_width / S.keys.length ) - 4\n    #...................................................................................................\n    if S.widths?      then  S.widths[ idx ]      ?= S.width for idx in [ 0 ... S.keys.length ]\n    else                    S.widths              = ( S.width for key in S.keys )\n    #...................................................................................................\n    if S.alignments?  then  S.alignments[ idx ]  ?= S.alignment for idx in [ 0 ... S.keys.length ]\n    else                    S.alignments          = ( S.alignment for key in S.keys )\n    #...................................................................................................\n    return send d\n\n#-----------------------------------------------------------------------------------------------------------\nas_row = ( S, data, keys = null, is_header = false ) =>\n  R           = []\n  if keys? then keys_and_idxs = ( [ key, idx, ] for key, idx in keys                  )\n  else          keys_and_idxs = ( [ idx, idx, ] for      idx in [ 0 ... data.length ] )\n  unless S.multiline is false\n    throw new Error \"^intertype/tabulate/as_row@2^ setting multiline #{rpr S.multiline} not supported\"\n  for [ key, idx, ] in keys_and_idxs\n    value     = data[ key ]\n    text      = as_text S, value\n    width     = S.widths[ idx ]\n    align     = S.alignments[ idx ]\n    ellipsis  = S.ellipsis\n    text      = to_width text, width, { align, ellipsis, }\n    text      = S.format text, { value, row: data, is_header, key, idx, } if S.format?\n    R.push text\n  #.......................................................................................................\n  return S.box.left + ( R.join S.box.center ) + S.box.right\n\n#-----------------------------------------------------------------------------------------------------------\n$as_row = ( S ) ->\n  return $ ( d, send ) ->\n    return send d unless select d, '^data'\n    { data, } = d\n    text      = as_row S, data, S.keys, false\n    is_header = false\n    return send new_datom '^table', { text, }\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\nget_divider = ( S, position ) ->\n  switch position\n    when 'top'\n      left    = S.box.lt\n      center  = S.box.ct\n      right   = S.box.rt\n    when 'heading'\n      left    = S.box.lm\n      center  = S.box.cm\n      right   = S.box.rm\n    when 'mid'\n      left    = S.box.lm\n      center  = S.box.cm\n      right   = S.box.rm\n    when 'bottom'\n      left    = S.box.lb\n      center  = S.box.cb\n      right   = S.box.rb\n    else throw new Error \"unknown position #{rpr position}\"\n  #.........................................................................................................\n  last_idx  = S.widths.length - 1\n  R         = []\n  #.........................................................................................................\n  ### TAINT simplified calculation; assumes single-width glyphs and symmetric padding etc. ###\n  for width, idx in S.widths\n    column = []\n    if idx is 0\n      column.push left\n      count = ( S.box.left_width - 1 )           + width + ( ( S.box.center_width - 1 ) / 2 )\n    else if idx is last_idx\n      column.push center\n      count = ( ( S.box.center_width - 1 ) / 2 ) + width + ( S.box.right_width - 1 )\n    else\n      column.push center\n      count = ( ( S.box.center_width - 1 ) / 2 ) + width + ( ( S.box.center_width - 1 ) / 2 )\n    column.push S.box.hs.repeat count\n    column.push right if idx is last_idx\n    R.push column.join ''\n  #.........................................................................................................\n  return R.join ''\n\n# #-----------------------------------------------------------------------------------------------------------\n# $dividers = ( S ) ->\n#   # return D.new_stream pipeline: [ ( $dividers_top S ), ( $dividers_mid S ), ( $dividers_bottom S ), ]\n#   return D.new_stream pipeline: [ ( $dividers_top S ), ( $dividers_bottom S ), ]\n\n#...........................................................................................................\n$dividers_top = ( S ) ->\n  is_first = true\n  return $ ( d, send ) ->\n    return send d unless is_first\n    is_first = false\n    send new_datom '^table', { text: ( get_divider S, 'top' ), }\n    #.......................................................................................................\n    unless S.headings in [ null, false, ]\n      send new_datom '^table', { text: ( as_row       S, S.headings, null, true ), }\n      send new_datom '^table', { text: ( get_divider  S, 'heading'              ), }\n    #.......................................................................................................\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n$dividers_bottom = ( S ) ->\n  return SP.window { width: 2, fallback: null, }, $ ( de, send ) ->\n    [ d, e, ] = de\n    return null unless d?\n    send d\n    unless e?\n      send new_datom '^table', { text: ( get_divider S, 'bottom' ), }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$cleanup = ( S ) -> SP.$filter ( d ) -> select d, '^table'\n\n#-----------------------------------------------------------------------------------------------------------\nboxes =\n  plain:\n    lt:   '┌'\n    ct:   '┬'\n    rt:   '┐'\n    lm:   '├'\n    cm:   '┼'\n    rm:   '┤'\n    lb:   '└'\n    cb:   '┴'\n    rb:   '┘'\n    vs:   '│'\n    hs:   '─'\n  round:\n    lt:   '╭'\n    ct:   '┬'\n    rt:   '╮'\n    lm:   '├'\n    cm:   '┼'\n    rm:   '┤'\n    lb:   '╰'\n    cb:   '┴'\n    rb:   '╯'\n    vs:   '│'\n    hs:   '─'\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\n$as_event = ( S ) -> $ ( data, send ) -> send new_datom '^data', { data, }\n\n#-----------------------------------------------------------------------------------------------------------\nas_text = ( S, x ) ->\n  return '○'        if x is undefined\n  return '●'        if x is null\n  return \"''\"       if x is ''\n  type = type_of x\n  return 'NaN'      if type is 'nan'\n  return rpr x      if type is 'infinity'\n  return jr x       if type in [ 'object', 'list', 'number', ]\n  return jr x unless type is 'text'\n  x = x.replace /\\n/g, '⏎'\n  x = x.replace /[\\x00-\\x1a\\x1c-\\x1f]/g, ( $0 ) -> String.fromCodePoint ( $0.codePointAt 0 ) + 0x2400\n  x = x.replace /\\x1b(?!\\[)/g, '␛'\n  return x\n  # switch\n  #   when 'text'\n  #     return    x if S.multiline\n  #     return jr x\n  #     return    x unless ( x is '' ) or ( /\\s/.test x )\n  #   ### other types, number formatting go here ###\n  # return rpr x\n\n#-----------------------------------------------------------------------------------------------------------\ncopy      = ( x ) ->\n  return Object.assign [], x if isa.list    x\n  return Object.assign {}, x if isa.object  x\n  return x\n\n\n\n############################################################################################################\nif module is require.main then do =>\n\n\n\n\n\n"
  ]
}