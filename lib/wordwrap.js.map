{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/wordwrap.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n###\n\nWord wrapping, line justification\n\n###\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/WRAP'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nPATH                      = require 'path'\nFS                        = require 'fs'\n{ jr, }                   = CND\nassign                    = Object.assign\njoin_path                 = ( P... ) -> PATH.resolve PATH.join P...\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = types\n# SP                        = require 'steampipes'\n# { $\n#   $drain }                = SP.export()\n# DATOM                     = require 'datom'\n# { new_datom\n#   select }                = DATOM.export()\n# INTERTEXT                 = null\n# LineBreaker               = null\nMultimix                  = require 'multimix'\n\n#-----------------------------------------------------------------------------------------------------------\nintersperse = ( list, x ) ->\n  ### thx to https://stackoverflow.com/a/37129036/7568091 ###\n  is_first = true\n  for value in list\n    yield x unless is_first\n    is_first = false\n    yield value\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Wrap extends Multimix\n  _defaults: {}\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null) ->\n    super()\n    @settings = { @_defaults..., settings..., }\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  justify_monospaced: ( words, line_width, word_widths = null ) ->\n    validate.list_of 'nonempty_text', words\n    if words.length is 0 then throw new Error \"^itx/wrap/justify@448^ expected list with at least 1 element, got empty list\"\n    validate.positive_integer line_width\n    if word_widths?\n      validate.list_of 'positive_integer', word_widths\n      unless word_widths.length is words.length\n        throw new Error \"^itx/wrap/justify@334^ length of list word_widths must match length of words list, got list of length #{word_widths.length}\"\n    else\n      { width_of, } = require 'to-width'\n      word_widths   = ( width_of word for word in words )\n    return ( @_justify_monospaced words, line_width, word_widths ).join ''\n\n  #---------------------------------------------------------------------------------------------------------\n  _justify_monospaced: ( words, line_width, word_widths ) ->\n    if ( word_count = words.length ) is 1 then return words[ 0 ]\n    material_width = ( word_widths.reduce ( ( a, x ) => a + x + 1 ), 0 ) - 1\n    if material_width > line_width\n      throw new Error \"^itx/wrap/justify@997^ material width #{material_width} exceeds line width #{line_width}\"\n    if word_count is 2\n      return [ words[ 0 ], ( ' '.repeat line_width - material_width ), words[ 1 ], ]\n    #.......................................................................................................\n    R     = [ ( intersperse words, ' ' )... ]\n    idxs  = ( idx for idx in [ 0 ... R.length ] when ( idx %% 2 ) is 1 )\n    j     = -1\n    CND.shuffle idxs\n    loop\n      break if material_width >= line_width\n      j = ( j + 1 ) % idxs.length\n      R[ idxs[ j ] ] += ' '\n      material_width++\n    #.......................................................................................................\n    return R\n\n\n############################################################################################################\nmodule.exports = new Wrap()\n\n\n############################################################################################################\nif module is require.main then do =>\n\n\n\n"
  ]
}