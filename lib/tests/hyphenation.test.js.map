{
  "version": 3,
  "file": "hyphenation.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/hyphenation.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/TESTS/HYPHENATION'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\nDATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n{ new_datom\n  lets\n  select }                = DATOM.export()\ntypes                     = require '../types'\n{ isa\n  validate\n  # cast\n  # declare\n  # declare_cast\n  # check\n  # sad\n  # is_sad\n  # is_happy\n  type_of }               = types\n#...........................................................................................................\ntest                      = require 'guy-test'\nINTERTEXT                 = require '../..'\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.HYPH.hyphenate\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [\"\",\"\",]\n    [\"lexicographer\",\"lex|i|cog|ra|pher\",]\n    [\"astronomer\",\"as|tronomer\",]\n    [\"dweeb\",\"dweeb\",]\n    [\"Tylenol\",\"Tylenol\",]\n    [\"diagonally\",\"di|ag|o|nally\",]\n    [\"demeaned\",\"de|meaned\",]\n    [\"Pasternak\",\"Paster|nak\",]\n    [\"proofreader\",\"proof|reader\",]\n    [\"monochrome\",\"mono|chrome\",]\n    [\"diving\",\"div|ing\",]\n    [\"Bimini\",\"Bi|mini\",]\n    [\"hedonist\",\"he|do|nist\",]\n    [\"distinctiveness\",\"dis|tinc|tive|ness\",]\n    [\"repugnance\",\"re|pug|nance\",]\n    [\"haste\",\"haste\",]\n    [\"mistimes\",\"mist|imes\",]\n    [\"bested\",\"bested\",]\n    [\"sundered\",\"sun|dered\",]\n    [\"articulation\",\"ar|tic|u|la|tion\",]\n    [\"LEXICOGRAPHER\",\"LEX|I|COG|RA|PHER\",]\n    [\"ASTRONOMER\",\"AS|TRONOMER\",]\n    [\"DWEEB\",\"DWEEB\",]\n    [\"TYLENOL\",\"TYLENOL\",]\n    [\"DIAGONALLY\",\"DI|AG|O|NALLY\",]\n    [\"DEMEANED\",\"DE|MEANED\",]\n    [\"PASTERNAK\",\"PASTER|NAK\",]\n    [\"PROOFREADER\",\"PROOF|READER\",]\n    [\"MONOCHROME\",\"MONO|CHROME\",]\n    [\"DIVING\",\"DIV|ING\",]\n    [\"BIMINI\",\"BI|MINI\",]\n    [\"HEDONIST\",\"HE|DO|NIST\",]\n    [\"DISTINCTIVENESS\",\"DIS|TINC|TIVE|NESS\",]\n    [\"REPUGNANCE\",\"RE|PUG|NANCE\",]\n    [\"HASTE\",\"HASTE\",]\n    [\"MISTIMES\",\"MIST|IMES\",]\n    [\"BESTED\",\"BESTED\",]\n    [\"SUNDERED\",\"SUN|DERED\",]\n    [\"ARTICULATION\",\"AR|TIC|U|LA|TION\",]\n    [\"over-guesstimate\",\"over-guessti|mate\"]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      # debug '^44453^', INTERTEXT.HYPH.new_hyphenator()\n      # debug '^44453^', INTERTEXT.HYPH.reveal_hyphens INTERTEXT.HYPH.new_hyphenator() 'fantastic'\n      # debug '^777801^', INTERTEXT.HYPH.hyphenate probe\n      resolve ( INTERTEXT.HYPH.hyphenate probe ).replace /\\xad/g, '|'\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.HYPH.soft_hyphen_chr\" ] = ( T, done ) ->\n  T.eq INTERTEXT.HYPH.soft_hyphen_chr, '\\u00ad'\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.HYPH.count_soft_hyphens\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ \"\",           0, ]\n    [\"lex­i­cog­ra­pher\",4,]\n    [\"as­tronomer\",1,]\n    [\"di­ag­o­nally\",3,]\n    [\"de­meaned\",1,]\n    [\"Paster­nak\",1,]\n    [\"proof­reader\",1,]\n    [\"mono­chrome\",1,]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve INTERTEXT.HYPH.count_soft_hyphens probe\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"INTERTEXT.HYPH.reveal_hyphens\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [ \"fan\\xadtas\\xadtic\",           \"fan-tas-tic\", ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve INTERTEXT.HYPH.reveal_hyphens probe\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  # await @_demo()\n  test @\n  help 'ok'\n  # test @[ \"demo\" ]\n  # test @[ \"hyphenate\" ]\n\n  # test @[ \"must quote attribute value\" ]\n  # test @[ \"DATOM.HTML._as_attribute_literal\" ]\n  # test @[ \"isa.intertext_html_tagname\" ]\n  # test @[ \"HTML.datom_as_html (singular tags)\" ]\n  # test @[ \"HTML.datom_as_html (closing tags)\" ]\n  # test @[ \"HTML.datom_as_html (opening tags)\" ]\n  # test @[ \"HTML.datom_as_html (texts)\" ]\n  # test @[ \"HTML.datom_as_html (opening tags w/ $value)\" ]\n  # test @[ \"HTML.datom_as_html (system tags)\" ]\n  # test @[ \"HTML.datom_as_html (raw pseudo-tag)\" ]\n  # test @[ \"HTML.datom_as_html (doctype)\" ]\n  # test @[ \"HTML.html_as_datoms (1)\" ]\n  # test @[ \"HTML.html_as_datoms (dubious 2)\" ]\n  # test @[ \"HTML.html_as_datoms (dubious w/ pre-processor)\" ]\n\n\n\n"
  ]
}