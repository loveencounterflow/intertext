{
  "version": 3,
  "file": "demo.js",
  "sourceRoot": "../..",
  "sources": [
    "src/chevrotain-html/demo.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CHEVROTAIN-API'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\nLEXER                     = require './chevrotain-lexer'\nPARSER                    = require './chevrotain-parser'\nGRAMMAR                   = require './chevrotain-grammar'\n{ lets\n  freeze }                = ( new ( require 'datom' ).Datom { dirty: false, } ).export()\n{ isa }                   = require '../types'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@parse = ( html, settings ) ->\n  echo CND.white CND.reverse CND.bold ( jr html ).padEnd 108, ' '\n  defaults      = { lexer_mode: 'outside_mode', parser_start: 'document', }\n  settings      = { defaults..., settings..., }\n  tokenization  = LEXER.tokenize html, settings.lexer_mode\n  @show_tokens html, tokenization\n  parsification = PARSER.parse tokenization, settings.parser_start\n  R             =\n    source:         html\n    cst:            parsification.cst\n    lexer_mode:     settings.lexer_mode\n    parser_start:   settings.parser_start\n    errors:\n      lexer:          tokenization.errors\n      parser:         parsification.errors\n  @show_tree R\n  for token in ( tokens = GRAMMAR.extract_tokens R )\n    if token.$stamped                 then  color = CND.grey\n    else if token.$key is '^unknown'  then  color = CND.red\n    else if token.$key is '^text'     then  color = CND.white\n    else if token.$key is '^error'    then  color = ( P... ) -> CND.red CND.reverse CND.bold P...\n    else                                    color = CND.orange\n    echo color jr token\n  @show_condensed_tokens tokens\n  echo CND.grey CND.reverse CND.bold ( jr html ).padEnd 108, ' '\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@show_tree = ( parsification ) ->\n  { source\n    cst\n    errors }  = parsification\n  @_show_tree source, cst\n  error_count = errors.lexer.length + errors.parser.length\n  if error_count > 0\n    warn 'lexer:',  jr error for error in errors.lexer\n    warn 'parser:', jr error for error in errors.parser\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nlft = ( x ) -> x.toString().padEnd 15, ' '\n@_show_tree = ( source, tree, level = 0 ) ->\n  ### terminals: [\"image\",\"startOffset\",\"endOffset\",...\n  non-terminals: [\"name\",\"children\",\"location\"] ###\n  # whisper jr ( k for k of tree )\n  return null unless tree?\n  indent = '  '.repeat level\n  #.........................................................................................................\n  unless tree.children?\n    { name\n      start\n      stop\n      text } = GRAMMAR.distill_token tree\n    echo \"#{indent}#{CND.blue lft name} #{CND.grey lft jr [ start, stop, ]} #{CND.yellow jr text}\"\n    return null\n  #.........................................................................................................\n  { start\n    stop }  = GRAMMAR.distill_token tree.location\n  text      = source[ start ... stop ]\n  echo \"#{indent}#{CND.lime lft tree.name} #{CND.grey lft jr [ start, stop, ]} #{CND.yellow jr text}\"\n  for key, tokens of tree.children\n    for token in tokens\n      @_show_tree source, token, level + 1\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@show_tokens = ( source, tokenization ) ->\n  tokens = [ tokenization.tokens..., ].sort ( a, b ) -> return a.startOffset - b.startOffset\n  for token in tokens\n    echo CND.blue jr GRAMMAR.distill_token token\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nas_text = ( x ) ->\n  return jr x if isa.object x\n  return jr x if isa.list   x\n  return x.toString()\n\n#-----------------------------------------------------------------------------------------------------------\n@condense_token = ( token ) ->\n  keys    = ( Object.keys token ).sort()\n  keys    = keys.filter ( x ) -> x not in [ 'message', ]\n  values  = ( ( as_text token[ k ] ) for k in keys )\n  return values.join '-'\n\n#-----------------------------------------------------------------------------------------------------------\n@condense_tokens = ( tokens ) -> ( ( @condense_token t ) for t in tokens when t.$key isnt '^report' ).join '#'\n\n#-----------------------------------------------------------------------------------------------------------\n@show_condensed_tokens = ( tokens ) ->\n  for token in tokens\n    help @condense_token token\n  info @condense_tokens tokens\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  @parse \"\"\"<a>before<tag>text</tag>after</a>\"\"\"\n  @parse \"\"\"before<py/ma3ke4dang1/<oyaji/馬克當/<a><b/></c></d>\"\"\"\n  @parse \"\"\"before <![CDATA[\\none\\ntwo\\n]]>after\"\"\"\n  @parse \"\"\"before <![CDATA[x]]>after\"\"\"\n  @parse \"\"\"before <![CDATA[x]]>\"\"\"\n  @parse \"\"\"before <![CDATA[]]>\"\"\"\n  @parse \"\"\"<!DOCTYPE html>\"\"\"\n  @parse \"\"\"<?xml something something?>\"\"\"\n  @parse \"\"\"<?xml something something>\"\"\"\n  @parse \"\"\"<?dodat blah?>\"\"\"\n  @parse \"\"\"before <otag a1=41 a2=42>after\"\"\"\n  @parse \"\"\"before <ntag a1=41 a2=42/stm_text/ after\"\"\"\n  @parse \"\"\"before <ntag a1=v1 a2=v2/stm_text/ after\"\"\"\n  @parse \"\"\"before <otag a1=v1 a2=v2>after\"\"\"\n  @parse \"\"\"<br><tag a1 a2=v2 a3 = v3>some text</tag>\"\"\"\n  @parse \"\"\"<br><tag a1 a2=v2 p3:a3 = v3>some text</tag>\"\"\"\n  @parse \"\"\"<br><tag#c5 a1 a2=v2 p3:a3 = v3>some text</tag>\"\"\"\n  @parse \"\"\"<A></B>\"\"\"\n  @parse \"\"\"<STAG/>\"\"\",                   { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"</CTAG>\"\"\",                   { lexer_mode: 'outside_mode', parser_start: 'ctag',   }\n  @parse \"\"\"<NTAG/\"\"\",                    { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"<a><!-- COMMENT HERE --><b>\"\"\"\n  echo CND.blue CND.reverse '  /'.repeat 36\n  echo CND.blue CND.reverse ' / '.repeat 36\n  echo CND.blue CND.reverse '/  '.repeat 36\n  @parse \"\"\"<UNFINISHED\"\"\",               { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"<?=)(//&%%$§$§\"!\"\"\",          { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"<>\"\"\",                        { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"<!>\"\"\",                       { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"<![CDATA[\"\"\",                 { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\">\"\"\",                         { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"< =\"\"\",                       { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"<a b= >\"\"\",                   { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"foo bar<a b= >\"\"\",            { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"foo bar<c><a b= >\"\"\",         { lexer_mode: 'outside_mode', parser_start: 'osntag', }\n  @parse \"\"\"foo bar<c><a b= >\"\"\"\n  @parse \"< >\"\n  @parse \"< x >\"\n  @parse \"<>\"\n  @parse \"<\"\n  @parse \"<tag\"\n  @parse \"if <math> a > b </math> then\"\n  @parse \"if <math> a < b </math> then\"\n  @parse \">\"\n  @parse \"&\"\n  @parse \"&amp;\"\n  @parse \"<tag a='<'>\"\n  @parse \"\"\"BEFORE <NTAG/STM_TEXT/ AFTER\"\"\"\n  @parse \"\"\"bare value: <t a=v>\"\"\"\n  @parse \"\"\"bare value: <t a=v'w>\"\"\"\n  @parse \"\"\"bare value: <t a=v\"w>\"\"\"\n  @parse \"\"\"squot value: <t a='v'>\"\"\"\n  @parse \"\"\"dquot value: <t a=\"v\">\"\"\"\n  @parse \"\"\"squot value: <t a='\"v\"'>\"\"\"\n  @parse \"\"\"dquot value: <t a=\"'v'\">\"\"\"\n\n\n\n###\n\nvocabulary:\n\n  from lexer:\n    ^raw    { ..., }\n    ^error { code: 'extraneous', message, ... }\n    ^error { code: 'missing', message, ... }\n\n  public:\n    <document { start, }\n    >document { stop,  }\n    ^otag     { name, a,  start, stop, } for tags like `<a b=c>`\n    ^ctag     { name,     start, stop, } for tags like `</a>`\n    ^stag     { name,     start, stop, } for tags like `<a b=c/>`\n    ^ntag     { name,     start, stop, } for opening part in NET tags like `<a b=c/d/`\n    ^ztag     { name,     start, stop, } for closing part (the slash) in NET tags like `<a b=c/d/`\n    ^text     { text,     start, stop, }\n    <CDATA    { text,     start, stop, }\n    >CDATA    { text,     start, stop, }\n    ^COMMENT  { text,     start, stop, }\n\n'<CDATA'\n'>CDATA'\n'^COMMENT'\n'^DOCTYPE'\n'^PI'\n'^report'\n'^error'\n'^text'\n'<tag'\n'>tag'\n'^text'\n'^token'\n\n###\n\n\n"
  ]
}