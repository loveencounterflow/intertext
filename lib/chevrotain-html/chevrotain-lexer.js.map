{
  "version": 3,
  "file": "chevrotain-lexer.js",
  "sourceRoot": "../..",
  "sources": [
    "src/chevrotain-html/chevrotain-lexer.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CHEVROTAIN-HTML-LEXER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\n{ freeze, }               = Object\n{ createToken: CHVRTN_create_token, Lexer, } = require 'chevrotain'\n\n\n#===========================================================================================================\n# A little mini DSL for easier lexer definition.\n#-----------------------------------------------------------------------------------------------------------\n@tokensDictionary   = tokensDictionary = {}\n\n#-----------------------------------------------------------------------------------------------------------\ntok = ( name, pattern, settings ) ->\n  settings      = { name, pattern, settings..., }\n  if ( switch_mode = settings.switch_mode )?\n    delete settings.switch_mode\n    settings.pop_mode   = true\n    settings.push_mode  = switch_mode\n  newTokenType                      = CHVRTN_create_token settings\n  tokensDictionary[ settings.name ] = newTokenType\n  return newTokenType\n\n#-----------------------------------------------------------------------------------------------------------\no_comment       = tok 'o_comment',        /<!--[\\s\\S]*?-->/,              { line_breaks: true,            }\no_cdata         = tok 'o_cdata',          /<!\\[CDATA\\[[\\s\\S]*?]]>/\no_doctype       = tok 'o_doctype',        /<!DOCTYPE\\s+[^>]*>/\no_xmldecl       = tok 'o_xmldecl',        /<\\?xml\\s+[\\s\\S]*?\\?>/\no_pi            = tok 'o_pi',             /<\\?[\\s\\S]*?\\?>/\ni_slash_open    = tok 'i_slash_open',     /<\\//,                          { push_mode: \"inside_mode\",     }\ni_open          = tok 'i_open',           /</,                            { push_mode: \"inside_mode\",     }\no_text          = tok 'o_text',           /[^<]+/\ni_close         = tok 'i_close',          />/,                            { pop_mode: true,               }\ni_special_close = tok 'i_special_close',  /\\?>/,                          { pop_mode: true,               }\ni_slash_close   = tok 'i_slash_close',    /\\/>/,                          { pop_mode: true,               }\nstm_slash1      = tok 'stm_slash1',       /\\/(?!>)/,                      { push_mode: 'slashtext_mode',  }\nstm_slash2      = tok 'stm_slash2',       /\\//,                           { switch_mode: \"outside_mode\",  }\nstm_text        = tok 'stm_text',         /[^\\/]+/\ni_slash         = tok 'i_slash',          /\\//\nv_equals        = tok 'v_equals',         /\\s*=\\s*/,                      { push_mode: 'value_mode',      }\nv_value         = tok 'v_value',          /\"[^\"]*\"|'[^']*'|[^>\\s\\/]+/,    { pop_mode: true,               }\ni_whitespace    = tok 'i_whitespace',     /[ \\t\\r\\n]/,                    { group: Lexer.SKIPPED,         }\n### NOTE this is the most generous definition of an XML name, ever. It basically allows anything except\nthose few characters that would definitely mess with the rest of the grammar, so tags like `<123>`,\n`<foo:bar#baz.gnu bro:go=42>` are totally OK. Consumers are advised to do their own checking to narrow\ndown available choices or interpret special constructs, as the case may be. The regex below stipulates\nthat a valid XML name is any sequence of one or more characters, excluding only\n* whitespace,\n* brackets (`{[(<>)]}`),\n* question and exclamation marks (`!?`),\n* slashes (`/`),\n* quotes (`'` and `\"`).\n###\ni_name          = tok 'i_name',           /[^\\s!?=\\{\\[\\(<\\/>\\)\\]\\}'\"]+/\n\n\n#-----------------------------------------------------------------------------------------------------------\nxmlLexerDefinition =\n  defaultMode: 'outside_mode'\n  modes:\n    #.......................................................................................................\n    outside_mode: [\n      o_comment\n      o_cdata\n      o_doctype\n      o_xmldecl\n      o_pi\n      i_slash_open\n      i_open\n      o_text ]\n    #.......................................................................................................\n    inside_mode: [\n      i_close\n      i_special_close\n      i_slash_close\n      stm_slash1\n      i_slash\n      v_equals\n      i_name\n      i_whitespace ]\n    #.......................................................................................................\n    slashtext_mode: [\n      stm_slash2\n      stm_text ]\n    #.......................................................................................................\n    value_mode: [\n      v_value ]\n\n#-----------------------------------------------------------------------------------------------------------\n@lexer = do =>\n  # Reducing the amount of position tracking can provide a small performance boost (<10%)\n  # Likely best to keep the full info for better error position reporting and\n  # to expose \"fuller\" ITokens from the Lexer.\n  settings =\n    positionTracking:           'full'\n    ensureOptimizations:        false\n    ### TODO: inspect definitions for XML line terminators ###\n    lineTerminatorCharacters:   [ '\\n', ],\n    lineTerminatorsPattern:     /\\n|\\r\\n/g\n    errorMessageProvider:\n      ### see https://sap.github.io/chevrotain/docs/features/custom_errors.html ###\n      buildUnexpectedCharactersMessage: ( source, start, length, line, column ) ->\n        text = source[ start ... start + length ]\n        return \"extraneous characters on line #{line ? '?'} column #{column ? '?'}: #{jr text}\"\n  return new Lexer xmlLexerDefinition, settings\n\n\n#-----------------------------------------------------------------------------------------------------------\n@tokenize = ( source, lexer_mode = null ) -> @lexer.tokenize source, lexer_mode\n\n\n\n"
  ]
}