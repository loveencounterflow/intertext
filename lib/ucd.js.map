{
  "version": 3,
  "file": "ucd.js",
  "sourceRoot": "..",
  "sources": [
    "src/ucd.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B,EAfA;;;EAiBA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAlB5B;;;EAsBA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAA,CAAA;AAClB,QAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA,KAAA,EAAA,IAAA,EAAA;IAAE,CAAA,GAAgB;IAChB,YAAA,GAAgB;IAChB,IAAA,GAAgB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,2BAArB,CAAb;IAChB,KAAA,GAAgB,CAAE,EAAE,CAAC,YAAH,CAAgB,IAAhB,EAAsB;MAAE,QAAA,EAAU;IAAZ,CAAtB,CAAF,CAAgD,CAAC,KAAjD,CAAuD,IAAvD;IAChB,KAAA,uCAAA;;MACE,MAAgB,CAAE,CAAI,IAAI,CAAC,UAAL,CAAgB,GAAhB,CAAN,CAAA,IAAgC,CAAE,IAAI,CAAC,MAAL,GAAc,CAAhB,EAAhD;AAAA,iBAAA;;MACA,CAAA,CAAE,KAAF,EACE,IADF,EAEE,IAFF,CAAA,GAEY,CAAE,IAAI,CAAC,KAAL,CAAW,YAAX,CAAF,CAA2B,CAAC,MAFxC;MAGA,KAAA,GAAY,QAAA,CAAS,KAAT,EAAgB,EAAhB;MACZ,IAAA,GAAY,QAAA,CAAS,IAAT,EAAgB,EAAhB;MACZ,CAAC,CAAC,IAAF,CAAO,CAAE,KAAF,EAAS,IAAT,EAAe,IAAf,CAAP;IAPF;AAQA,WAAO;EAbS;AAtBlB",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/UCD'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@get_block_list = ->\n  R             = []\n  line_pattern  = /// ^ (?<first> [0-9A-F]+ ) \\.\\. (?<last> [0-9A-F]+ ) ; \\x20 (?<name> .+ ) $ ///\n  path          = PATH.resolve PATH.join __dirname, '../data/Blocks-13.0.0.txt'\n  lines         = ( FS.readFileSync path, { encoding: 'utf-8', } ).split '\\n'\n  for line in lines\n    continue unless ( not line.startsWith '#' ) and ( line.length > 0 )\n    { first\n      last\n      name  } = ( line.match line_pattern ).groups\n    first     = parseInt first, 16\n    last      = parseInt last,  16\n    R.push { first, last, name, }\n  return R\n\n"
  ]
}