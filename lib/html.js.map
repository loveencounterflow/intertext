{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/html.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/HTML'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\nDATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n{ new_datom\n  lets\n  freeze\n  thaw\n  is_frozen\n  select }                = DATOM.export()\ntypes                     = require './types'\n{ isa\n  validate\n  # cast\n  # declare\n  # declare_cast\n  # check\n  # sad\n  # is_sad\n  # is_happy\n  type_of }               = types\n#...........................................................................................................\n{ Cupofjoe }              = require 'cupofjoe'\nassign                    = Object.assign\nexcluded_content_parts    = [ '', null, undefined, ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_escape_text = ( x ) ->\n  R           = x\n  R           = R.replace /&/g,   '&amp;'\n  R           = R.replace /</g,   '&lt;'\n  R           = R.replace />/g,   '&gt;'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_attribute_literal = ( x ) ->\n  R           = if isa.text x then x else JSON.stringify x\n  must_quote  = not isa._intertext_html_naked_attribute_text R\n  R           = @_escape_text R\n  R           = R.replace /'/g,   '&#39;'\n  R           = R.replace /\\n/g,  '&#10;'\n  R           = \"'\" + R + \"'\" if must_quote\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_parse_compact_tagname = ( compact_tagname ) ->\n  { tagname\n    attributes }  = ( compact_tagname.match /^(?<tagname>[^#.]*)(?<attributes>.*)$/ ).groups\n  R               = {}\n  R.tagname       = tagname unless tagname is ''\n  return R if attributes is ''\n  for attribute in attributes.split /([#.][^#.]*)/\n    continue if attribute is ''\n    avalue = attribute[ 1 .. ]\n    unless avalue.length > 0\n      throw new Error \"^intertext/_parse_compact_tagname@1234^ illegal compact tag syntax in #{rpr compact_tagname}\"\n\n    if attribute[ 0 ] is '#' then R.id = avalue\n    else                          ( R.class ?= [] ).push avalue\n  R.class = R.class.join ' ' if R.class?\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@tag = ( compact_tagname, attributes, content... ) ->\n  { start, content, end, } = @_tag compact_tagname, attributes, content\n  return [ start, content..., end, ] if end?\n  return [ start, content..., ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_tag = ( compact_tagname, attributes, content, settings ) ->\n  validate.nonempty_text compact_tagname\n  { tagname, id, class: clasz, }  = @_parse_compact_tagname compact_tagname\n  validate.intertext_html_tagname tagname\n  use_attributes                  = false\n  processed_content               = []\n  call_functions                  = settings?.call_functions ? true\n  content                         = thaw content if ( Object.isFrozen content )\n  #.........................................................................................................\n  if attributes?\n    if isa.object attributes then use_attributes = true\n    else                          content.unshift attributes\n  #.........................................................................................................\n  if content.length is 0\n    sigil   = '^'\n    end_tag = null\n  #.........................................................................................................\n  else\n    sigil   = '<'\n    end_tag = new_datom \">#{tagname}\"\n    for part in content\n      continue if part in excluded_content_parts\n      switch type_of part\n        when 'text'     then  processed_content.push new_datom '^text', { text: part, }\n        when 'function'\n          if call_functions then  processed_content.push x unless ( x = part() ) in excluded_content_parts\n          else                    processed_content.push part\n        else                  processed_content.push part\n  #.........................................................................................................\n  if id? or clasz?\n    idclass         = {}\n    idclass.id      = id    if id?\n    idclass.class   = clasz if clasz?\n    if use_attributes\n      attributes = assign idclass, attributes\n    else\n      use_attributes  = true\n      attributes      = idclass\n  #.........................................................................................................\n  if use_attributes then  start_tag = new_datom \"#{sigil}#{tagname}\", attributes\n  else                    start_tag = new_datom \"#{sigil}#{tagname}\"\n  #.........................................................................................................\n  processed_content = processed_content.flat Infinity\n  return { start: start_tag, content: processed_content, end: end_tag, } if end_tag?\n  return { start: start_tag, content: processed_content, }\n\n#-----------------------------------------------------------------------------------------------------------\n@html_from_datoms   = ( ds... ) -> return ( @_html_from_datom d for d in ds.flat Infinity ).join ''\n                                                                  ### TAINT ^^^ ??? ^^^ ###\n@$html_from_datoms  = ->\n  { $, } = ( require 'steampipes' ).export()\n  return $ ( d, send ) =>\n    return send @_html_from_datom d unless isa.list d\n    send x for x in @html_from_datoms d...\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_html_from_datom = ( d ) ->\n  return @_html_from_datom ( @text d )[ 0 ] if isa.text d ### TAINT ??? ###\n  DATOM.types.validate.datom_datom d\n  atxt          = ''\n  sigil         = d.$key[ 0 ]\n  tagname       = d.$key[ 1 .. ]\n  is_empty_tag  = isa._intertext_html_empty_element_tagname tagname\n  x_key         = null\n  #.........................................................................................................\n  ### TAINT simplistic solution; namespace might already be taken? ###\n  if sigil in '[~]'\n    switch sigil\n      when '[' then sigil = '<'\n      when '~' then sigil = '^'\n      when ']' then sigil = '>'\n    [ x_key, tagname, ] = [ tagname, 'x-sys', ]\n  #.........................................................................................................\n  return ( @_escape_text d.text ? '' )      if ( sigil is '^' ) and ( tagname is 'text'     )\n  return (               d.text ? '' )      if ( sigil is '^' ) and ( tagname is 'raw'      )\n  return \"<!DOCTYPE #{d.$value ? 'html'}>\"  if ( sigil is '^' ) and ( tagname is 'doctype'  )\n  return \"</#{tagname}>\"                    if sigil is '>'\n  #.........................................................................................................\n  ### NOTE sorting atxt by keys to make result predictable: ###\n  if isa.object d.$value then  src = d.$value\n  else                          src = d\n  atxt += \" x-key=#{@_as_attribute_literal x_key}\" if x_key?\n  for key in ( Object.keys src ).sort()\n    continue if key.startsWith '$'\n    if ( value = src[ key ] ) is true then  atxt += \" #{key}\"\n    else                                    atxt += \" #{key}=#{@_as_attribute_literal value}\"\n  #.........................................................................................................\n  ### TAINT make self-closing elements configurable, depend on HTML5 type ###\n  slash     = if ( sigil is '<' ) or is_empty_tag then '' else \"</#{tagname}>\"\n  x_sys_key = if x_key? then \"<x-sys-key>#{x_key}</x-sys-key>\" else ''\n  return \"<#{tagname}>#{slash}#{x_sys_key}\" if atxt is ''\n  return \"<#{tagname}#{atxt}>#{x_sys_key}#{slash}\"\n\n\n\n#===========================================================================================================\n# HTML SPECIALS\n#-----------------------------------------------------------------------------------------------------------\n@raw = ( text ) ->\n  unless ( arity = arguments.length ) is 1\n    throw new Error \"^intertext/raw@1801^ expected 1 argument, got #{arity}\"\n  validate.text text\n  return [ ( new_datom '^raw', { text, } ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@text = ( text ) ->\n  unless ( arity = arguments.length ) is 1\n    throw new Error \"^intertext/text@2368^ expected 1 argument, got #{arity}\"\n  validate.text text\n  return [ ( new_datom '^text', { text, } ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@css = ( href ) ->\n  ### Creates a list with one datom representing a stylesheet link: `<link rel=stylesheet\n  href=\"../reset.css\"/>`\n  ###\n  unless ( arity = arguments.length ) is 1\n    throw new Error \"^intertext/css@2935^ expected 1 argument, got #{arity}\"\n  validate.nonempty_text href\n  return [ ( new_datom '^link', { rel: 'stylesheet', href, } ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@script = ( x ) ->\n  unless ( arity = arguments.length ) is 1\n    throw new Error \"^intertext/script@3502^ expected 1 argument, got #{arity}\"\n  return switch type = type_of x\n    when 'text'     then @_script_src     x\n    when 'function' then @_script_literal x\n  throw new Error \"^intertext/script@4069^ expected a text or a function, got a #{type}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_script_src = ( src ) ->\n  ### Creates a list with one datom representing a script tag: `<script type=\"text/javascript\"\n  src=\"../jquery-3.4.1.js\">`\n  ###\n  validate.nonempty_text src\n  return [ ( new_datom '^script', { src, } ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_script_literal = ( f ) ->\n  ### Creates a list with three datoms representing a script tag with embedded JavaScript source text:\n  ```\n  <script type=\"text/javascript\">\n    var a, b;\n    a = 42;\n    b = a * 2;\n    </script>`\n  ###\n  return [ ( new_datom '<script' ), ( @_as_iife f ), ( new_datom '>script' ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_as_iife = ( f ) ->\n  R = \"(#{f.toString()})();\"\n  return ( @raw R )[ 0 ]\n\n\n\n#===========================================================================================================\n# CUP OF HTML\n#-----------------------------------------------------------------------------------------------------------\nMAIN = @ ### TAINT won't work with configured instances of HTML ###\n\nclass @Cupofhtml extends Cupofjoe\n  # @include CUPOFHTML, { overwrite: false, }\n  # @extend MAIN, { overwrite: false, }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null) ->\n    super { { flatten: true, }..., settings..., }\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  tag: ( tagname, content... ) ->\n    return @cram content...      unless tagname?\n    ### TAINT allow extended syntax, attributes ###\n    return @cram new_datom \"^#{tagname}\" if content.length is 0\n    return @cram ( new_datom \"<#{tagname}\" ), content..., ( new_datom \">#{tagname}\" )\n\n  #---------------------------------------------------------------------------------------------------------\n  text:     ( P... ) -> @cram MAIN.text     P...\n  raw:      ( P... ) -> @cram MAIN.raw      P...\n  script:   ( P... ) -> @cram MAIN.script   P...\n  css:      ( P... ) -> @cram MAIN.css      P...\n\n\n\n"
  ]
}