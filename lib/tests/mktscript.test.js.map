{
  "version": 3,
  "file": "mktscript.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/mktscript.test.coffee"
  ],
  "names": [],
  "mappings": ";AAmQ0C;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "# ###\n\n# ====================================================================================\n# compact names for MKTScript:\n\n# `<div#c432.foo.bar>...</div>` => `<div id=c432 class='foo bar'>...</div>`\n# `<p.noindent>...</p>` => `<p class=noindent>...</p>`\n\n# positional arguments:\n# `<columns:2>` => `<columns count=2/>` => `<columns count=2></columns>` ?=> `<mkts-columns count=2></mkts-columns>`\n\n# NB Svelte uses capitalized names, allows self-closing tags(!): `<Mytag/>`\n\n# ###\n\n# 'use strict'\n\n# ############################################################################################################\n# CND                       = require 'cnd'\n# rpr                       = CND.rpr\n# badge                     = 'INTERTEXT/TESTS/MKTSCRIPT'\n# log                       = CND.get_logger 'plain',     badge\n# info                      = CND.get_logger 'info',      badge\n# whisper                   = CND.get_logger 'whisper',   badge\n# alert                     = CND.get_logger 'alert',     badge\n# debug                     = CND.get_logger 'debug',     badge\n# warn                      = CND.get_logger 'warn',      badge\n# help                      = CND.get_logger 'help',      badge\n# urge                      = CND.get_logger 'urge',      badge\n# echo                      = CND.echo.bind CND\n# { jr, }                   = CND\n# #...........................................................................................................\n# DATOM                     = new ( require 'datom' ).Datom { dirty: false, }\n# { new_datom\n#   lets\n#   select }                = DATOM.export()\n# types                     = require '../types'\n# { isa\n#   validate\n#   # cast\n#   # declare\n#   # declare_cast\n#   # check\n#   # sad\n#   # is_sad\n#   # is_happy\n#   type_of }               = types\n# #...........................................................................................................\n# test                      = require 'guy-test'\n# INTERTEXT                 = require '../..'\n# { MKTS, }                 = INTERTEXT\n\n\n\n# #===========================================================================================================\n# # TESTS\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.datoms_from_html\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [\"line A<br/>line B\",[{\"text\":\"line A\",\"$key\":\"^text\"},{\"$key\":\"^br\"},{\"text\":\"line B\",\"$key\":\"^text\"}],null]\n#     [\"<p>|here and|<br>\",[{\"$key\":\"<p\"},{\"text\":\"|here and|\",\"$key\":\"^text\"},{\"$key\":\"^br\"}],null]\n#     [\"|foo |<p>|here and|<br>|there|\",[{\"text\":\"|foo |\",\"$key\":\"^text\"},{\"$key\":\"<p\"},{\"text\":\"|here and|\",\"$key\":\"^text\"},{\"$key\":\"^br\"},{\"text\":\"|there|\",\"$key\":\"^text\"}],null]\n#     [\"< >\",[{\"message\":\"Syntax error: whitespace not allowed here: \\\"< >\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"< >\",\"$key\":\"~error\"}],null]\n#     [\"< x >\",[{\"message\":\"Syntax error: whitespace not allowed here: \\\"< x >\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"< x >\",\"$key\":\"~error\"}],null]\n#     [\"<>\",[{\"message\":\"Syntax error: closing bracket too close to opening bracket: \\\"<>\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<>\",\"$key\":\"~error\"}],null]\n#     [\"<\",[{\"message\":\"Syntax error: opening but no closing bracket: \\\"<\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<\",\"$key\":\"~error\"}],null]\n#     [\"<tag\",[{\"message\":\"Syntax error: opening but no closing bracket: \\\"<tag\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<tag\",\"$key\":\"~error\"}],null]\n#     [\"tag>\",[{\"message\":\"Syntax error: closing but no opening bracket: \\\"tag>\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"tag>\",\"$key\":\"~error\"}],null]\n#     [\">\",[{\"message\":\"Syntax error: closing but no opening bracket: \\\">\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\">\",\"$key\":\"~error\"}],null]\n#     [\"<\",[{\"message\":\"Syntax error: opening but no closing bracket: \\\"<\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<\",\"$key\":\"~error\"}],null]\n#     [\"x\",[{\"text\":\"x\",\"$key\":\"^text\"}],null]\n#     [\"&\",[{\"text\":\"&\",\"$key\":\"^text\"}],null]\n#     [\"&;\",[{\"text\":\"&;\",\"$key\":\"^text\"}],null]\n#     [\"&&\",[{\"text\":\"&&\",\"$key\":\"^text\"}],null]\n#     [\"max & moritz\",[{\"text\":\"max & moritz\",\"$key\":\"^text\"}],null]\n#     [\"&amp;\",[{\"text\":\"&amp;\",\"$key\":\"^text\"}],null]\n#     [\"<tag>\\n \\n\\t\\n</p>\",[{\"$key\":\"<tag\"},{\"text\":\"\\n \\n\\t\\n\",\"$key\":\"^text\"},{\"$key\":\">p\"}],null]\n#     [\"<tag a='<'>\",[{\"message\":\"Syntax error: additional opening bracket: \\\"<tag a='<'>\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<tag a='<'>\",\"$key\":\"~error\"}],null]\n#     [\"<tag a='>'>\",[{\"text\":\">\",\"$key\":\"^text\"},{\"message\":\"Syntax error: closing but no opening bracket: \\\"'>\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"'>\",\"$key\":\"~error\"}],null]\n#     [\"if <math> a > b </math> then\",[{\"text\":\"if \",\"$key\":\"^text\"},{\"$key\":\"<math\"},{\"message\":\"Syntax error: closing before opening bracket: \\\" a > b </math> then\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\" a > b </math> then\",\"$key\":\"~error\"}],null]\n#     ]\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       text      = probe\n#       resolve MKTS.datoms_from_html text\n#   #.........................................................................................................\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.datoms_from_html (compact syntax)\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     # [ '<columns =2 =3>' ]\n#     [\"<div>\",[{\"$key\":\"<div\"}]]\n#     [\"<div#c432.foo.bar>\",[{\"$key\":\"<div\",\"id\":\"c432\",\"class\":\"foo bar\"}]]\n#     [\"<p.noindent>\",[{\"$key\":\"<p\",\"class\":\"noindent\"}]]\n#     ]\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       resolve MKTS.datoms_from_html probe\n#   #.........................................................................................................\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.$datoms_from_html\" ] = ( T, done ) ->\n#   SP                        = require 'steampipes'\n#   # SP                        = require '../../apps/steampipes'\n#   { $\n#     $async\n#     $drain\n#     $watch\n#     $show  }                = SP.export()\n#   #.........................................................................................................\n#   probe         = \"\"\"\n#     <p>A <em>concise</em> introduction to the things discussed below.</p>\n#     \"\"\"\n#   matcher = [{\"$key\":\"<p\"},{\"text\":\"A \",\"$key\":\"^text\"},{\"$key\":\"<em\"},{\"text\":\"concise\",\"$key\":\"^text\"},{\"$key\":\">em\"},{\"text\":\" introduction to the things discussed below.\",\"$key\":\"^text\"},{\"$key\":\">p\"}]\n#   #.........................................................................................................\n#   pipeline      = []\n#   pipeline.push [ ( Buffer.from probe ), ]\n#   pipeline.push SP.$split()\n#   pipeline.push MKTS.$datoms_from_html()\n#   pipeline.push $show()\n#   pipeline.push $drain ( result ) =>\n#     help jr result\n#     T.eq result, matcher\n#     done()\n#   SP.pull pipeline...\n#   #.........................................................................................................\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS.datoms_from_html (dubious)\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     ### TAINT these edge cases should be solved by an appropriate (MKTScript) pre-processor; NB that in\n#     MKTScript stray pointy brackets in ordinary text (but not in `<code>` blocks) are forbidden and must\n#     be escaped as entities wherever they appear in attribute values; these rules, however, do not\n#     necessarily apply when parsing general MKTS sources. ###\n#     ###\n#     [\"< >\",[{\"text\":\"< >\",\"$key\":\"^text\"}],null]          # !!! silent failure\n#     [\"< x >\",[{\"text\":\"< x >\",\"$key\":\"^text\"}],null]      # !!! silent failure\n#     [\"<>\",[{\"text\":\"<>\",\"$key\":\"^text\"}],null]            # !!! silent failure\n#     [\"<\",[{\"text\":\"<\",\"$key\":\"^text\"}],null]              # !!! silent failure\n#     [\"<tag\",[{\"text\":\"<tag\",\"$key\":\"^text\"}],null]        # !!! silent failure\n#     ###\n#     [\"if <math> a > b </math> then\",[{\"text\":\"if \",\"$key\":\"^text\"},{\"$key\":\"<math\"},{\"message\":\"Syntax error: closing before opening bracket: \\\" a > b </math> then\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\" a > b </math> then\",\"$key\":\"~error\"}],null]\n#     [\">\",[{\"message\":\"Syntax error: closing but no opening bracket: \\\">\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\">\",\"$key\":\"~error\"}],null]\n#     [\"&\",[{\"text\":\"&\",\"$key\":\"^text\"}],null]\n#     [\"&amp;\",[{\"text\":\"&amp;\",\"$key\":\"^text\"}],null]\n#     [\"<tag a='<'>\",[{\"message\":\"Syntax error: additional opening bracket: \\\"<tag a='<'>\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<tag a='<'>\",\"$key\":\"~error\"}],null]\n#     ]\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       resolve MKTS.datoms_from_html probe\n#   #.........................................................................................................\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"__MKTS.datoms_from_html (SGML SHORTTAG syntax)\" ] = ( T, done ) ->\n#   provide_basic_parser.apply X = {}\n#   urge X._parse_html \"<foo><br>content</foo>\"\n#   urge X._parse_html \"<foo#id.class>\"\n#   urge X._parse_html \"</foo>\"\n#   urge X._parse_html \"<tag>content</>\"\n#   urge X._parse_html \"<tag#id>content</>\"\n#   urge X._parse_html \"<tag/content/\"\n#   urge X._parse_html \"Yellow is <zh/黃/ <py/huang2/ in Mandarin.\"\n#   urge X._parse_html \"Yellow is <zh/黃/> <py/huang2/> in Mandarin.\"\n#   urge X._parse_html \"Yellow is <zh/黃> <py/huang2> in Mandarin.\"\n#   urge X._parse_html \"China is big: <py|Zhongguo hen da.> in Mandarin.\"\n#   urge X._parse_html \"a<py|huang2>b\"\n#   urge X._parse_html \"a<py|huang2 di4>b\"\n#   # probes_and_matchers = [\n#   #   [\"<tag#id>content</>\",[{\"message\":\"Syntax error: additional opening bracket: \\\"<tag a='<'>\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<tag a='<'>\",\"$key\":\"~error\"}],null]\n#   #   [\"before<tag#id>content</>after\",[{\"message\":\"Syntax error: additional opening bracket: \\\"<tag a='<'>\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<tag a='<'>\",\"$key\":\"~error\"}],null]\n#   #   ]\n#   # for [ probe, matcher, error, ] in probes_and_matchers\n#   #   await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#   #     # resolve MKTS.datoms_from_html probe\n#   #     resolve ( require '../html' ).datoms_from_html probe\n#   # #.........................................................................................................\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"__MKTS.datoms_from_html (SGML NET syntax)\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [\"<tag#id/class/content/\",[{\"message\":\"Syntax error: additional opening bracket: \\\"<tag a='<'>\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<tag a='<'>\",\"$key\":\"~error\"}],null]\n#     [\"before<tag#id/class/content/after\",[{\"message\":\"Syntax error: additional opening bracket: \\\"<tag a='<'>\\\"\",\"type\":\"mkts-syntax-html\",\"source\":\"<tag a='<'>\",\"$key\":\"~error\"}],null]\n#     ]\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       resolve MKTS.datoms_from_html probe\n#   #.........................................................................................................\n#   done()\n#   return null\n\n\n# #===========================================================================================================\n# # DEMOS\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS demo\" ] = ( T, done ) ->\n#   text = \"\"\"<!DOCTYPE html>\n#   <h1#s4451><strong>CHAPTER VI.</strong> <name ref=hd553>Humpty Dumpty</h1>\n\n#   <p#p227.noindent>However, the egg only got larger and larger, and <em>more and more human</em>:<br>\n\n#   when she had come within a few yards of it, she saw that it had eyes and a nose and mouth; and when she\n#   had come close to it, she saw clearly that it was <name ref=hd556>HUMPTY DUMPTY</name> himself. ‘It can’t\n#   be anybody else!’ she said to herself.<br/>\n\n#   ‘I’m as certain of it, as if his name were written all over his face.’\n\n#   \"\"\"\n#   for d in datoms = MKTS.datoms_from_html text\n#     echo jr d\n#   echo '-'.repeat 108\n#   echo result = ( MKTS.html_from_datoms d for d in datoms ).join ''\n#   # debug '^2228^', jr result\n#   T.eq result, \"<!DOCTYPE html>\\n<h1 id=s4451><strong>CHAPTER VI.</strong> \\\n#     <name ref=hd553>Humpty Dumpty</h1>\\n\\n<p class=noindent id=p227>However, the egg only got larger and larger, \\\n#     and <em>more and more human</em>:<br>\\n\\nwhen she had come within a few yards of it, she saw that it \\\n#     had eyes and a nose and mouth; and when she\\nhad come close to it, she saw clearly that it was \\\n#     <name ref=hd556>HUMPTY DUMPTY</name> himself. ‘It can’t\\nbe anybody else!’ she said to herself.\\\n#     <br>\\n\\n‘I’m as certain of it, as if his name were written all over his face.’\\n\"\n#   #.........................................................................................................\n#   done()\n#   return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"MKTS demo (buffer)\" ] = ( T, done ) ->\n#   text    = \"\"\"<!DOCTYPE html>\n#   <h1#c4443><strong.myclass>CHAPTER VI.</strong> <name ref=hd553>Humpty Dumpty</h1>\"\"\"\n#   buffer  = Buffer.from text\n#   # debug '^80009^', buffer\n#   # for d in datoms = MKTS.datoms_from_html buffer\n#   for d in datoms = MKTS.datoms_from_html buffer\n#     echo jr d\n#   echo '-'.repeat 108\n#   echo result = ( MKTS.html_from_datoms d for d in datoms ).join ''\n#   T.eq result, \"<!DOCTYPE html>\\n<h1 id=c4443><strong class=myclass>CHAPTER VI.</strong> <name ref=hd553>Humpty Dumpty</h1>\"\n#   #.........................................................................................................\n#   done()\n#   return null\n\n\n# ############################################################################################################\n# if module is require.main then do => # await do =>\n#   # await @_demo()\n#   # await test @\n#   await test @[ \"MKTS.datoms_from_html (SGML SHORTTAG syntax)\" ]\n#   await test @[ \"MKTS.datoms_from_html (SGML NET syntax)\" ]\n#   # await test @[ \"MKTS.datoms_from_html\" ]\n#   # await test @[ \"MKTS.datoms_from_html (compact syntax)\" ]\n#   # await test @[ \"MKTS.$datoms_from_html\" ]\n#   # await test @[ \"MKTS.datoms_from_html (dubious)\" ]\n#   # await test @[ \"MKTS demo\" ]\n#   # await test @[ \"MKTS demo (buffer)\" ]\n"
  ]
}