{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/diff.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "#!node\n\nCND                       = require 'cnd'\nbadge                     = 'INTERTEXT/DIFF'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  type_of  }              = types\n{ to_width, width_of, }   = require 'to-width'\nMultimix                  = require 'multimix'\n\n#-----------------------------------------------------------------------------------------------------------\nclass Diff extends Multimix\n  # @include MAIN, { overwrite: false, }\n  # @extend MAIN, { overwrite: false, }\n  _defaults:\n    color_same:   'white'\n    color_old:    'orange'\n    color_new:    'lime'\n    tty_columns:  null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null) ->\n    super()\n    @settings               = { @_defaults..., settings..., }\n    @_DMP                   = require 'diff-match-patch'\n    @_dmp                   = new @_DMP.diff_match_patch()\n    unless @settings.tty_columns?\n      INTERTEXT = require '..'\n      @settings.tty_columns = ( INTERTEXT.get_terminal_size() ).columns\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  rawdiff: ( old_text, new_text ) ->\n    R = @_dmp.diff_main old_text, new_text\n    @_dmp.diff_cleanupSemantic R\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  colordiff: ( old_text, new_text ) ->\n    INTERTEXT = require '..'\n    ### TAINT to be replaced by INTERTEXT.COLORS ###\n    _cnd      = require 'cnd/lib/TRM-CONSTANTS'\n    R         = ''\n    diff      = @rawdiff old_text, new_text\n    colorized = ( @_colorize dd, text for [ dd, text, ] in diff ).join ''\n    lines     = colorized.split '\\n'\n    for line in lines\n      line += _cnd.reverse + _cnd.colors.white\n      line  = ( to_width line, @settings.tty_columns ) + '\\n'\n      R    += line\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _colorize: ( delta_code, text ) ->\n    ### TAINT to be replaced by INTERTEXT.COLORS ###\n    lines = text.split '\\n'\n    color = switch delta_code\n      when -1 then CND[ @settings.color_old   ]\n      when  0 then CND[ @settings.color_same  ]\n      when +1 then CND[ @settings.color_new   ]\n    return ( CND.reverse color line for line in lines ).join '\\n'\n\n\n\n############################################################################################################\nmodule.exports = new Diff()\n\n\n############################################################################################################\nif module is require.main then do =>\n\n\n"
  ]
}