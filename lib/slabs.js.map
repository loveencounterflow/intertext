{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/slabs.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA,SAAA,EAAA,WAAA,EAAA,QAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,EAAA,SAAA,EAAA,GAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;;;;;;;;;;;;EAiBA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B;;EACA,MAAA,GAA4B,MAAM,CAAC;;EACnC,SAAA,GAA4B,QAAA,CAAA,GAAE,CAAF,CAAA;WAAY,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,GAAA,CAAV,CAAb;EAAZ,EA/B5B;;;EAiCA,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,IAFF,EAGE,OAHF,CAAA,GAG4B,KAH5B;;EAIA,EAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,CAAA,GAC4B,EAAE,CAAC,MAAH,CAAA,CAD5B;;EAEA,KAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,SAAF,EACE,MADF,CAAA,GAC4B,KAAK,CAAC,MAAN,CAAA,CAD5B;;EAEA,SAAA,GAA4B;;EAC5B,WAAA,GAA4B;;EAC5B,QAAA,GAA4B,OAAA,CAAQ,UAAR;;EAMtB;;;;IAAN,MAAA,MAAA,QAAoB,SAApB,CAAA;;MAYE,WAAa,CAAE,WAAW,IAAb,CAAA;aACX,CAAA;QACA,IAAC,CAAA,QAAD,GAAY,CAAE,GAAA,IAAC,CAAA,SAAH,EAAiB,GAAA,QAAjB;AACZ,eAAO;MAHI,CAXf;;;MAiBE,gBAAkB,CAAE,IAAF,CAAA;AACpB,YAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,GAAA,EAAA,YAAA,EAAA,YAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA;;;UACI,YAAgB,OAAA,CAAQ,IAAR;SADpB;;;UAGI,cAAgB,OAAA,CAAQ,WAAR;;QAChB,YAAA,GAAgB,IAAI,WAAJ,CAAgB,IAAhB,EAJpB;;QAMI,OAAA,GAAgB,SAAS,CAAC,IAAI,CAAC;QAC/B,OAAA,GAAgB;QAChB,YAAA,GAAgB;QAChB,KAAA,GAAgB;QAChB,IAAA,GAAgB;QAChB,CAAA,GAAgB,CAAE,KAAF,EAAS,IAAT;QAChB,CAAA,CAAE,KAAF,EACE,GADF,EAEE,KAFF,CAAA,GAEgB,IAAC,CAAA,QAAQ,CAAC,MAF1B,EAZJ;;;AAiBI,eAAM,wCAAN;UACE,GAAA,GAAgB;UAChB,IAAA,GAAgB,IAAI;UACpB,YAAA,GAAgB,GAAG,CAAC;UACpB,QAAA,GAAgB,IAAI,CAAC,MAAL,GAAc,EAHpC;;AAKM,kBAAO,IAAI,CAAE,QAAF,CAAX;AAAA,iBACO,OADP;cACqB,CAAE,GAAF,EAAO,IAAP,CAAA,GAAiB,CAAE,GAAF,EAAO,IAAI,mBAAJ,GAAuB,GAA9B;AAA/B;;AADP,iBAGO,OAHP;cAGqB,CAAE,GAAF,EAAO,IAAP,CAAA,GAAiB,CAAE,KAAF,EAAS,IAAI,mBAAb;AAHtC,WALN;;UAUM,KAAK,CAAC,IAAN,CAAY,IAAZ;UACA,IAAI,CAAC,IAAL,CAAY,GAAZ;QAZF,CAjBJ;;QA+BI,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAI,CAAC,IAAP,CAAY,EAAZ;AACT,eAAO;MAjCS,CAjBpB;;;MAqDE,oBAAsB,CAAE,IAAF,CAAA;AACxB,YAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA,KAAA,EAAA;QAAI,CAAA,CAAE,KAAF,EAAS,IAAT,CAAA,GAAoB,IAAC,CAAA,gBAAD,CAAkB,IAAlB,CAApB;QACA,OAAA,GAAoB,IAAC,CAAA,QAAQ,CAAC,QAAQ,CAAC;QACvC,MAAA,GAAoB,IAAC,CAAA,QAAQ,CAAC;QAC9B,QAAA;;AAAsB;UAAA,KAAA,mDAAA;;yBAAA,IAAA,GAAO,IAAI,CAAE,GAAF;UAAX,CAAA;;;AACtB,eAAO;UAAE,QAAF;UAAY,OAAZ;UAAqB,MAArB;UAA6B,IAAA,EAAM,QAAQ,CAAC,MAA5C;UAAoD,MAAA,EAAQ;QAA5D;MALa,CArDxB;;;MA6DE,2BAA6B,CAAE,IAAF,CAAA,EAAA;;QAE3B,QAAQ,CAAC,aAAT,CAAuB,IAAvB;AACA,eAAO,CAAE,IAAI,0BAAN,EAA+B,IAAI,CAAE,IAAI,CAAC,MAAL,GAAc,CAAhB,CAAnC;MAHoB,CA7D/B;;;MAmEE,mBAAqB,CAAE,UAAF,EAAc,OAAd,CAAA;QACnB,QAAQ,CAAC,+BAAT,CAAyC,UAAzC;QACA,QAAQ,CAAC,uBAAT,CAAiC,OAAjC;AACA,eAAO,IAAC,CAAA,oBAAD,CAAsB,UAAtB,EAAkC,OAAlC;MAHY,CAnEvB;;;MAyEE,oBAAsB,CAAE,UAAF,EAAc,OAAd,CAAA;eACpB,QAAQ,CAAC,+BAAT,CAAyC,UAAzC;MADoB,CAzExB;;;MA6EE,QAAU,CAAE,UAAF,EAAc,YAAY,IAA1B,EAAgC,WAAW,IAA3C,CAAA;AACZ,YAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,KAAA,EAAA,IAAA;;QACI,QAAQ,CAAC,+BAAT,CAAyC,UAAzC;QACA,CAAA,CAAE,KAAF,EACE,GADF,EAEE,KAFF,CAAA,GAEgB,UAAU,CAAC,MAF3B;QAGA,CAAA,CAAE,QAAF,CAAA,GAAgB,UAAhB;;UACA,YAAgB;;;UAChB,WAAgB,QAAQ,CAAC,MAAT,GAAkB;;QAClC,SAAA,GAAgB,IAAI,CAAC,GAAL,CAAS,SAAT,EAAoB,CAApB;QAChB,QAAA,GAAgB,IAAI,CAAC,GAAL,CAAS,QAAT,EAAmB,QAAQ,CAAC,MAAT,GAAkB,CAArC;QAChB,CAAA,GAAgB,GAVpB;;QAYI,KAAW,oEAAX;UACE,OAAA,GAAU,QAAQ,CAAE,GAAF;UAClB,IAAA,GAAU,OAAO;UACjB,KAAA,GAAU,OAAO,CAAM,OAAO,CAAC,MAAR,GAAiB,CAAvB;UACjB,CAAA,IAAU;AACV,kBAAO,KAAP;AAAA,iBACO,KADP;cACmB;AAAZ;AADP,iBAEO,KAFP;cAEmB,CAAK,GAAA,KAAS,QAAZ,GAA0B,CAAA,IAAK,MAA/B,GAAA,MAAF;AAAZ;;AAFP,iBAIO,GAJP;cAImB,CAAK,GAAA,KAAS,QAAZ,GAA0B,CAAA,GAAI,CAAC,uBAA/B,GAAA,MAAF;AAAZ;AAJP;;cAMO,MAAM,IAAI,KAAJ,CAAU,CAAA,mDAAA,CAAA,CAAoD,GAAA,CAAI,GAAJ,CAApD,CAAA,CAAV;AANb;QALF,CAZJ;;AAyBI,eAAO;MA1BC;;IA9EZ;;oBACE,SAAA,GAOE,CAAA;;;;;;;MAAA,MAAA,EAAc;QAAE,KAAA,EAAO,GAAT;QAAc,GAAA,EAAK,GAAnB;QAAwB,KAAA,EAAO;MAA/B,CAAd;MACA,QAAA,EAAc;QAAE,UAAA,EAAY;MAAd;IADd;;;;gBA5DJ;;;EAgKA,MAAM,CAAC,OAAP,GAAiB,IAAI,KAAJ,CAAA,EAhKjB;;;EAoKA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA,CAAA,IAAlC;;AApKA",
  "sourcesContent": [
    "\n'use strict'\n\n\n###\n\n'Slab': the part of a word that is separated from others by breakpoints\n\n> The addressable unit of memory on the NCR 315 series is a \"slab\", short for \"syllable\", consisting of 12\n> data bits and a parity bit. Its size falls between a byte and a typical word (hence the name, 'syllable').\n> A slab may contain three digits (with at sign, comma, space, ampersand, point, and minus treated as\n> digits) or two alphabetic characters of six bits each.—[Wikipedia, \"NCR\n> 315\"](https://en.wikipedia.org/wiki/NCR_315)\n\n###\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/SLABS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nPATH                      = require 'path'\nFS                        = require 'fs'\n{ jr, }                   = CND\nassign                    = Object.assign\njoin_path                 = ( P... ) -> PATH.resolve PATH.join P...\n#...........................................................................................................\ntypes                     = require './types'\n{ isa\n  validate\n  cast\n  type_of }               = types\nSP                        = require 'steampipes'\n{ $\n  $drain }                = SP.export()\nDATOM                     = require 'datom'\n{ new_datom\n  select }                = DATOM.export()\nINTERTEXT                 = null\nLineBreaker               = null\nMultimix                  = require 'multimix'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nclass Slabs extends Multimix\n  _defaults:\n    ### NOTE A joint is a single chr from the Unicode BMP signalling the behavior/status of the right hand\n    end of a slab:\n    * **blunt**— joint: `#`; nothing (empty string) whether non-final or final\n    * **shy**—   joint: `=`; nothing when non-final, add hyphen (U+002d) when final\n    * **space**— joint: `°`; space (U+0020) when non-final, nothing (empty string) when final\n    ###\n    joints:       { blunt: '#', shy: '=', space: '°', }\n    versions:     { slabjoints: '0.0.1', }\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( settings = null) ->\n    super()\n    @settings = { @_defaults..., settings..., }\n    return @\n\n  #---------------------------------------------------------------------------------------------------------\n  _slabs_from_text: ( text ) ->\n    ### TAINT why doesn't import in top level work? ###\n    INTERTEXT    ?= require '..'\n    ### TAINT benchmark against https://github.com/hfour/linebreak-ts ###\n    LineBreaker  ?= require 'linebreak'\n    line_breaker  = new LineBreaker text\n    #.......................................................................................................\n    shy_chr       = INTERTEXT.HYPH.soft_hyphen_chr\n    spc_chr       = '\\x20'\n    prv_position  = 0\n    slabs         = []\n    ends          = []\n    R             = { slabs, ends, }\n    { blunt\n      shy\n      space }     = @settings.joints\n    #.......................................................................................................\n    ### LBO: line break opportunity ###\n    while ( lbo = line_breaker.nextBreak() )?\n      end           = blunt\n      slab          = text[ prv_position ... lbo.position ]\n      prv_position  = lbo.position\n      last_idx      = slab.length - 1\n      #.....................................................................................................\n      switch slab[ last_idx ]\n        when shy_chr  then [ end, slab, ] = [ shy, slab[ ... last_idx ] + '-', ]\n        ### TAINT in the future, we might want to consider other breaking (fixed or variable) spaces ###\n        when spc_chr  then [ end, slab, ] = [ space, slab[ ... last_idx ], ]\n      #.....................................................................................................\n      slabs.push  slab\n      ends.push   end\n    #.......................................................................................................\n    R.ends = R.ends.join ''\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  slabjoints_from_text: ( text ) ->\n    { slabs, ends, }  = @_slabs_from_text text\n    version           = @settings.versions.slabjoints\n    joints            = @settings.joints\n    segments          = ( slab + ends[ idx ] for slab, idx in slabs )\n    return { segments, version, joints, size: segments.length, cursor: 0, }\n\n  #---------------------------------------------------------------------------------------------------------\n  text_and_joint_from_segment: ( text ) ->\n    ### TAINT should pass in slabjoints object, idx, should not return joint chr but joint type ###\n    validate.nonempty_text text\n    return [ text[ ... text.length - 1 ], text[ text.length - 1 ], ]\n\n  #---------------------------------------------------------------------------------------------------------\n  get_line_candidates: ( slabjoints, metrics ) ->\n    validate.intertext_slabs_slabjoints_v001 slabjoints\n    validate.intertext_slabs_metrics metrics\n    return @_get_line_candidates slabjoints, metrics\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_line_candidates: ( slabjoints, metrics ) ->\n    validate.intertext_slabs_slabjoints_v001 slabjoints\n\n  #---------------------------------------------------------------------------------------------------------\n  assemble: ( slabjoints, first_idx = null, last_idx = null ) ->\n    ### TAINT validate indexes? ###\n    validate.intertext_slabs_slabjoints_v001 slabjoints\n    { blunt\n      shy\n      space }     = slabjoints.joints\n    { segments }  = slabjoints\n    first_idx    ?= 0\n    last_idx     ?= segments.length - 1\n    first_idx     = Math.max first_idx, 0\n    last_idx      = Math.min last_idx, segments.length - 1\n    R             = ''\n    #.......................................................................................................\n    for idx in [ first_idx .. last_idx ] by +1\n      segment = segments[ idx ]\n      text    = segment[ ... segment.length - 1 ]\n      final   = segment[     segment.length - 1 ]\n      R      += text\n      switch final\n        when blunt  then null\n        when space  then ( if idx isnt last_idx then R += '\\x20' )\n        ### TAINT allow to configure hyphen ###\n        when shy    then ( if idx isnt last_idx then R = R[ ... R.length - 1 ] )\n        # when shy    then ( if idx is last_idx then R += '-' )\n        else throw new Error \"^INTERTEXT/SLABS@4352^ unknown slab `end` option #{rpr end}\"\n    #.......................................................................................................\n    return R\n\n\n############################################################################################################\nmodule.exports = new Slabs()\n\n\n############################################################################################################\nif module is require.main then do =>\n\n\n\n"
  ]
}