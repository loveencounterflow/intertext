{
  "version": 3,
  "file": "chevrotain-grammar.js",
  "sourceRoot": "../..",
  "sources": [
    "src/chevrotain-html/chevrotain-grammar.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,cAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAd5B;;;EAgBA,CAAA,CAAE,MAAF,EACE,EADF,CAAA,GAC4B,GAD5B;;EAEA,KAAA,GAA4B,OAAA,CAAQ,oBAAR;;EAC5B,MAAA,GAA4B,OAAA,CAAQ,qBAAR;;EAC5B,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GAC4B,CAAE,IAAI,CAAE,OAAA,CAAQ,OAAR,CAAF,CAAmB,CAAC,KAAxB,CAA8B;IAAE,KAAA,EAAO;EAAT,CAA9B,CAAF,CAAmD,CAAC,MAApD,CAAA,CAD5B;;EAEA,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,UAAR,CAA5B,EAtBA;;;;;EA4BA,cAAA,GAAiB,QAAA,CAAE,GAAF,CAAA;AACjB,QAAA,CAAA,EAAA,GAAA,EAAA;IACE,KAAmB,CAAE,CAAA,wEAA8B,CAAE,uBAAlC,CAAnB;;AAAA,aAAO,KAAP;;IACA,IAAkC,CAAE,CAAC,CAAC,UAAF,CAAa,GAAb,CAAF,CAAA,IAAyB,CAAE,CAAC,CAAC,QAAF,CAAW,GAAX,CAAF,CAA3D;AAAA,aAAO,CAAC,wBAAR;;IACA,IAAkC,CAAE,CAAC,CAAC,UAAF,CAAa,GAAb,CAAF,CAAA,IAAyB,CAAE,CAAC,CAAC,QAAF,CAAW,GAAX,CAAF,CAA3D;AAAA,aAAO,CAAC,wBAAR;;AACA,WAAO;EALQ,EA5BjB;;;;;EAuCA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAE,KAAF,CAAA;AACjB,QAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA;IAAE,IAAA,GAAY,KAAK,CAAC;IAClB,KAAA,GAAY,KAAK,CAAC;IAClB,IAAA,GAAY,KAAK,CAAC,SAAN,GAAkB;IAC9B,IAAA,iFAAoC;AACpC,WAAO,CAAE,IAAF,EAAQ,IAAR,EAAc,KAAd,EAAqB,IAArB;EALQ,EAvCjB;;;EA+CA,IAAC,CAAA,0BAAD,GAA8B,QAAA,CAAE,aAAF,CAAA;AAC9B,QAAA,CAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAA,IAAA,EAAA,SAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,cAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAE,SAAA,GAAc,QAAA,CAAE,CAAF,CAAA;aAAS,CAAE,CAAA,KAAK,EAAP,CAAA,IAAc,CAAM,SAAN,CAAd,IAA4B,CAAE,GAAG,CAAC,GAAJ,CAAQ,CAAR,CAAF;IAArC;IACd,CAAA,CAAE,MAAF,CAAA,GAAc,aAAd;IACA,CAAA,GAAc;AACd;IAAA,KAAA,qCAAA;;MACE,CAAA,CAAE,MAAF,EACE,MADF,EAEE,OAFF,CAAA,GAEc,KAFd;MAGA,KAAA,GAAc;MACd,IAAA,GAAc,MAAA,GAAS;MACvB,IAAA,GAAc,aAAa,CAAC,MAAM;MAClC,IAAG,OAAO,CAAC,UAAR,CAAmB,YAAnB,CAAH;QAAwC,IAAA,GAAO,aAA/C;OAAA,MAAA;QACwC,IAAA,GAAO,QAD/C;;MAEA,CAAC,CAAC,IAAF,CAAO;QAAE,IAAA,EAAM,QAAR;QAAkB,IAAlB;QAAwB,MAAA,EAAQ,OAAhC;QAAyC,OAAzC;QAAkD,IAAlD;QAAwD,KAAxD;QAA+D;MAA/D,CAAP;IATF;AAUA;IAAA,KAAA,wCAAA;;MACE,CAAA,CAAE,IAAF,EACE,OADF,EAEE,KAFF,EAGE,cAHF,EAIE,OAJF,CAAA,GAIsB,KAJtB;MAKA,KAAA,GAAQ,KAAK,CAAC,KAAK,CAAC;MACpB,IAAA,GAAQ,KAAK,CAAC,KAAK,CAAC;MACpB,IAAA,GAAQ,KAAK,CAAC,KAAK,CAAC;AACpB,cAAO,IAAP;AAAA,aACO,4BADP;UAEI,IAAA,GAAQ;AADL;AADP,aAGO,0BAHP;UAII,IAAA,GAAQ;AADL;AAHP,aAKO,sBALP;UAMI,IAAA,GAAQ;AADL;AALP;UAQI,IAAA,GAAO;AARX;MASA,IAAqD,SAAA,CAAU,KAAV,CAArD;QAAA,KAAA,GAAU,KAAK,CAAC,aAAa,CAAC,YAA9B;;MACA,IAAqD,SAAA,CAAU,IAAV,CAArD;QAAA,IAAA,GAAU,KAAK,CAAC,aAAa,CAAC,UAA9B;;MACA,IAAqD,SAAA,CAAU,IAAV,CAArD;QAAA,IAAA,GAAU,KAAK,CAAC,aAAa,CAAC,MAA9B;;MACA,IAAqD,SAAA,CAAU,KAAV,CAArD;QAAA,KAAA,GAAU,EAAV;;MACA,IAAqD,SAAA,CAAU,IAAV,CAArD;QAAA,IAAA,GAAU,aAAa,CAAC,MAAM,CAAC,OAA/B;;MACA,IAAqD,SAAA,CAAU,IAAV,CAArD;QAAA,IAAA,GAAU,aAAa,CAAC,MAAM,oBAA9B;;MACA,CAAC,CAAC,IAAF,CAAO;QAAE,IAAA,EAAM,QAAR;QAAkB,IAAlB;QAAwB,QAAA,EAAU,IAAlC;QAAwC,MAAA,EAAQ,QAAhD;QAA0D,OAA1D;QAAmE,IAAnE;QAAyE,KAAzE;QAAgF;MAAhF,CAAP;IAxBF;AAyBA,WAAO;EAvCqB,EA/C9B;;;EAyFA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,aAAF,CAAA,EAAA;;AAClB,QAAA,CAAA,EAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA;IAAE,CAAA,CAAE,MAAF,EACE,GADF,CAAA,GACW,aADX;IAGA,MAAA,GAAc,IAAC,CAAA,0BAAD,CAA4B,aAA5B;IACd,MAAA,GAAc;MAAE,MAAA,EAAQ,SAAV;MAAqB,MAArB;MAA6B;IAA7B;IACd,MAAA,GAAc,IAAC,CAAA,eAAD,CAAiB,MAAjB,EAAyB,GAAzB;IACd,CAAA,GAAc,CAAE,MAAF,EAAU,GAAA,MAAV,EAAqB,GAAA,MAArB,EANhB;;IAQE,CAAC,CAAC,IAAF,CAAO,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;AAAY,aAAO,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC;IAA/B,CAAP;AACA,WAAO;EAVS,EAzFlB;;;EAsGA,IAAC,CAAA,eAAD,GAAmB,SAAA,CAAE,MAAF,EAAU,IAAV,EAAgB,QAAQ,CAAxB,CAAA;AACnB,QAAA,GAAA,EAAA,IAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,UAAA,EAAA,MAAA,EAAA,IAAA,EAAA;IAGE,IAAmB,YAAnB;;;;AAAA,aAAO,KAAP;;IACA,MAAA,GAAS,IAAI,CAAC,MAAL,CAAY,KAAZ,EAJX;;IAME,IAAO,qBAAP;MACE,IAAA,GAAc,IAAI,CAAC,SAAS,CAAC;MAC7B,CAAA,CAAE,IAAF,EACE,IADF,EAEE,KAFF,EAGE,IAHF,CAAA,GAGc,IAAC,CAAA,aAAD,CAAe,IAAf,CAHd;MAIA,UAAA,GAAc,KALlB;;AAOI,cAAO,IAAP;AAAA,aACO,QADP;AAAA,aACiB,UADjB;UACkC,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,OAAR;YAAoB,IAApB;YAA0B,KAA1B;YAAiC;UAAjC,CAAP;AAAvB;AADjB,aAEO,YAFP;UAEkC,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,MAAR;YAAoB,IAApB;YAA0B,KAA1B;YAAiC,IAAjC;YAAuC,IAAA,EAAM;UAA7C,CAAP;AAAjC;AAFP,aAGO,WAHP;UAGkC,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,UAAR;YAAoB,IAApB;YAA0B,KAA1B;YAAiC,IAAjC;YAAuC,OAAA,EAAS;UAAhD,CAAP;AAAjC;AAHP,aAIO,WAJP;UAIkC,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,UAAR;YAAoB,IAApB;YAA0B,KAA1B;YAAiC,IAAjC;YAAuC,OAAA,EAAS;UAAhD,CAAP;AAAjC;AAJP,aAKO,MALP;UAKkC,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,KAAR;YAAoB,IAApB;YAA0B,KAA1B;YAAiC,IAAjC;YAAuC,OAAA,EAAS;UAAhD,CAAP;AAAjC;AALP,aAMO,SANP;UAOI,MAAA,GAAS,KAAA,GAAQ;UACjB,KAAA,GAAS,IAAA,GAAQ;UACjB,KAAA,GAAU,MAAM;UAChB,KAAA,GAAU,MAAM;UAChB,KAAA,GAAU,MAAM;UAChB,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,QAAR;YAAmB,IAAA,EAAM,KAAzB;YAAiC,KAAA,EAAO,KAAxC;YAAiD,IAAA,EAAM;UAAvD,CAAP;UACN,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,OAAR;YAAmB,IAAA,EAAM,KAAzB;YAAiC,KAAA,EAAO,MAAxC;YAAiD,IAAA,EAAM;UAAvD,CAAP;UACN,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,QAAR;YAAmB,IAAA,EAAM,KAAzB;YAAiC,KAAA,EAAO,KAAxC;YAAiD,IAAA,EAAM;UAAvD,CAAP;AARH;AANP;UAgBI,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,QAAR;YAAkB,IAAA,EAAM,UAAxB;YAAoC,IAApC;YAA0C,KAA1C;YAAiD;UAAjD,CAAP;AAhBV;AAiBA,aAAO,KAzBT;KANF;;IAiCE,CAAA,CAAE,KAAF,EACE,IADF,CAAA,GACY,IAAC,CAAA,aAAD,CAAe,IAAI,CAAC,QAApB,CADZ;IAEA,IAAA,GAAY,MAAM;IAClB,IAAA,qCAAwB;AACxB,YAAO,IAAP;AAAA,WACO,QADP;QAEI,IAAA,GAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAE,CAAF,CAAK,CAAC;QACjC,IAAQ,6BAAR;UAA0C,IAAA,GAAO,OAAjD;SAAA,MACK,IAAG,mCAAH;UAAqC,IAAA,GAAO,OAA5C;SAAA,MACA,IAAG,gCAAH;UAAqC,IAAA,GAAO,OAA5C;;QACL,IAAG,gCAAH;UACE,IAAA,GAAO,CAAA;AAIP;;;;UAAA,KAAA,sCAAA;;YACE,CAAA,GAAY,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAE,CAAF,CAAK,CAAC;YACrC,CAAA,GAAY,cAAA,CAAe,GAAf;YACZ,IAAI,CAAE,CAAF,CAAJ,GAAY;UAHd;UAIA,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,MAAR;YAAgB,IAAhB;YAAsB,IAAtB;YAA4B,KAA5B;YAAmC,IAAnC;YAAyC,IAAzC;YAA+C;UAA/C,CAAP,EATR;SAAA,MAAA;UAWE,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,MAAR;YAAgB,IAAhB;YAAsB,IAAtB;YAA4B,KAA5B;YAAmC,IAAnC;YAAyC;UAAzC,CAAP,EAXR;;AALG;AADP,WAkBO,MAlBP;QAmBI,IAAA,GAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAE,CAAF,CAAK,CAAC;QACjC,MAAM,MAAA,CAAO;UAAE,IAAA,EAAM,MAAR;UAAgB,IAAhB;UAAsB,IAAtB;UAA4B,KAA5B;UAAmC,IAAnC;UAAyC;QAAzC,CAAP;AAFH;AAlBP;QAsBI,IAAmE,IAAA,KAAQ,UAA3E;UAAA,MAAM,MAAA,CAAO;YAAE,IAAA,EAAM,UAAR;YAAoB,IAApB;YAA0B,KAA1B;YAAiC,IAAjC;YAAuC;UAAvC,CAAP,EAAN;;AACA;QAAA,KAAA,WAAA;;UACE,KAAA,0CAAA;;YACE,OAAW,IAAC,CAAA,eAAD,CAAiB,MAAjB,EAAyB,KAAzB,EAAgC,KAAA,GAAQ,CAAxC;UADb;QADF;AAvBJ;AA0BA,WAAO;EAhEU;AAtGnB",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'CHEVROTAIN-HTML-GRAMMAR'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ assign\n  jr }                    = CND\nLEXER                     = require './chevrotain-lexer'\nPARSER                    = require './chevrotain-parser'\n{ lets\n  freeze }                = ( new ( require 'datom' ).Datom { dirty: false, } ).export()\n{ isa }                   = require '../types'\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nvalue_from_atr = ( atr ) ->\n  ### Return unquoted value of attribute as returned in CST; return `true` when empty string. ###\n  return true unless ( R = atr.children.v_value?[ 0 ]?.image )\n  return R[ 1 ... R.length - 1 ] if ( R.startsWith '\"' ) and ( R.endsWith '\"' )\n  return R[ 1 ... R.length - 1 ] if ( R.startsWith \"'\" ) and ( R.endsWith \"'\" )\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@distill_token = ( token ) ->\n  text      = token.image\n  start     = token.startOffset\n  stop      = token.endOffset + 1\n  name      = token.tokenType?.name ? '???'\n  return { name, text, start, stop, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_errors_from_parsification = ( parsification ) ->\n  not_given   = ( x ) -> ( x is '') or ( not x? ) or ( isa.nan x )\n  { source, } = parsification\n  R           = []\n  for error in parsification.errors.lexer\n    { offset\n      length\n      message } = error\n    start       = offset\n    stop        = offset + length\n    text        = parsification.source[ start ... stop ]\n    if message.startsWith 'extraneous' then code = 'extraneous'\n    else                                    code = 'other'\n    R.push { $key: '^error', code, origin: 'lexer', message, text, start, stop, }\n  for error in parsification.errors.parser\n    { name\n      message\n      token\n      resyncedTokens\n      context         } = error\n    start = error.token.startOffset\n    stop  = error.token.endOffset\n    text  = error.token.image\n    switch name\n      when 'NotAllInputParsedException'\n        code  = 'extraneous'\n      when 'MismatchedTokenException'\n        code  = 'mismatch'\n      when 'NoViableAltException'\n        code  = 'missing'\n      else\n        code = 'other'\n    start   = error.previousToken.startOffset         if not_given start\n    stop    = error.previousToken.endOffset           if not_given stop\n    text    = error.previousToken.image               if not_given text\n    start   = 0                                       if not_given start\n    stop    = parsification.source.length             if not_given stop\n    text    = parsification.source[ start ... stop ]  if not_given text\n    R.push { $key: '^error', code, chvtname: name, origin: 'parser', message, text, start, stop, }\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@extract_tokens = ( parsification ) ->\n  { source\n    cst }  = parsification\n  ### TAINT adapt errors ###\n  errors      = @_errors_from_parsification parsification\n  report      = { '$key': '^report', source, errors, }\n  tokens      = @_extract_tokens source, cst\n  R           = [ report, tokens..., errors..., ]\n  ### sort errors, tokens consistently ###\n  R.sort ( a, b ) -> return a.start - b.start\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_extract_tokens = ( source, tree, level = 0 ) ->\n  ### terminals: [\"image\",\"startOffset\",\"endOffset\",...\n  non-terminals: [\"name\",\"children\",\"location\"] ###\n  # whisper jr ( k for k of tree )\n  return null unless tree?\n  indent = '  '.repeat level\n  #.........................................................................................................\n  unless tree.children?\n    type        = tree.tokenType.name\n    { name\n      text\n      start\n      stop }    = @distill_token tree\n    token_name  = name\n    #.......................................................................................................\n    switch type\n      when 'o_text', 'stm_text' then  yield freeze { $key: '^text',    text, start, stop,                 }\n      when 'stm_slash2'         then  yield freeze { $key: '>tag',     text, start, stop, type: 'ztag',   }\n      when 'o_comment'          then  yield freeze { $key: '^COMMENT', text, start, stop, escaped: true,  }\n      when 'o_doctype'          then  yield freeze { $key: '^DOCTYPE', text, start, stop, escaped: true,  }\n      when 'o_pi'               then  yield freeze { $key: '^PI',      text, start, stop, escaped: true,  }\n      when 'o_cdata'\n        start1 = start + 9\n        stop1  = stop  - 3\n        text0   = source[ start   ... start1  ]\n        text1   = source[ start1  ... stop1   ]\n        text2   = source[ stop1   ... stop    ]\n        yield freeze { $key: '<CDATA',  text: text0,  start: start,   stop: start1, }\n        yield freeze { $key: '^text',   text: text1,  start: start1,  stop: stop1,  }\n        yield freeze { $key: '>CDATA',  text: text2,  start: stop1,   stop: stop,   }\n      else\n        yield freeze { $key: '^other', name: token_name, text, start, stop, }\n    return null\n  #.........................................................................................................\n  { start\n    stop }  = @distill_token tree.location\n  text      = source[ start ... stop ]\n  type      = tree.name ? '???'\n  switch type\n    when 'osntag'\n      name = tree.children.i_name[ 0 ].image\n      if      tree.children.i_close?       then type = 'otag'\n      else if tree.children.i_slash_close? then type = 'stag'\n      else if tree.children.stm_slash1?    then type = 'ntag'\n      if tree.children.attributes?\n        atrs = {}\n        # debug '^33412-1^', jr tree.children.attributes\n        # debug '^33412-2^', jr tree.children.attributes[ 0 ]\n        # debug '^33412-3^', jr tree.children.attributes[ 0 ].children.attribute\n        for atr in tree.children.attributes[ 0 ].children.attribute\n          k         = atr.children.i_name[ 0 ].image\n          v         = value_from_atr atr\n          atrs[ k ] = v\n        yield freeze { $key: '<tag', name, text, start, stop, type, atrs, }\n      else\n        yield freeze { $key: '<tag', name, text, start, stop, type, }\n    when 'ctag'\n      name = tree.children.i_name[ 0 ].image\n      yield freeze { $key: '>tag', name, text, start, stop, type, }\n    else\n      yield freeze { $key: \"^unknown\", text, start, stop, type, } unless type is 'document'\n      for key, tokens of tree.children\n        for token in tokens\n          yield from @_extract_tokens source, token, level + 1\n  return null\n\n\n"
  ]
}