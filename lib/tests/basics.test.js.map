{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../../src/tests/basics.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nbadge                     = 'INTERTEXT/TESTS/BASICS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ jr, }                   = CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n\n\n#===========================================================================================================\n# TESTS\n#-----------------------------------------------------------------------------------------------------------\n@[ \"BASICS rpr\" ] = ( T, done ) ->\n  INTERTEXT                 = require '../..'\n  { rpr }                   = INTERTEXT.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [\"foo\",\"'foo'\",null]\n    [[\"foo\"],\"[ 'foo' ]\",null]\n    [{ this: 42, and: true, that: [ 1, 2, null, undefined, ]},\"{ this: 42, and: true, that: [ 1, 2, null, undefined ] }\",null]\n    [undefined,\"undefined\",null]\n    [Infinity,\"Infinity\",null]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result  = rpr probe\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"BASICS camelize\" ] = ( T, done ) ->\n  INTERTEXT                 = require '../..'\n  { camelize }              = INTERTEXT.export()\n  #.........................................................................................................\n  probes_and_matchers = [\n    [ '',             '',           ]\n    [ '-',            '',           ]\n    [ '--',           '',           ]\n    [ '-a-',          'A',          ]\n    [ '-a',           'A',          ]\n    [ 'a-',           'a',          ]\n    [ 'helo',         'helo',       ]\n    [ 'helo-world',   'heloWorld',  ]\n    [ 'HELO-WORLD',   'HELOWORLD',  ]\n    [ 'µ-DOM',        'µDOM',       ]\n    [ 'danish-øre',   'danishØre',  ]\n    ]\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      result = camelize probe\n      resolve result\n  #.........................................................................................................\n  done()\n  return null\n\n\n\n############################################################################################################\nif module is require.main then do => # await do =>\n  # debug ( k for k of ( require '../..' ).HTML ).sort().join ' '\n  # await @_demo()\n  # test @\n  test @[ \"BASICS camelize\" ]\n  # test @[ \"HTML.datoms_from_html (dubious)\" ]\n  # test @[ \"HTML.datoms_from_html (2)\" ]\n  # test @[ \"HTML.html_from_datoms (singular tags)\" ]\n  # test @[ \"HTML Cupofhtml (1)\" ]\n  # test @[ \"HTML Cupofhtml (2)\" ]\n  # test @[ \"HTML._parse_compact_tagname\" ]\n"
  ]
}