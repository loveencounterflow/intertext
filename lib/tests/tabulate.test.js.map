{
  "version": 3,
  "file": "tabulate.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/tabulate.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'INTERTEXT/TESTS/TABULATE'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n{ is_empty\n  copy\n  assign\n  jr }                    = CND\n# PATH                      = require 'path'\n# FS                        = require 'fs'\n#...........................................................................................................\ntest                      = require 'guy-test'\n#...........................................................................................................\ntypes                     = ( require '../..' ).types\n{ isa\n  validate\n  cast\n  last_of\n  type_of }               = types\n\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_xxx_kw_demo = -> new Promise ( resolve ) =>\n  SP                        = require 'steampipes'\n  { $\n    $async\n    $watch\n    $show\n    $drain }                = SP.export()\n  TBL                       = ( require '../..' ).TBL\n  source                    = [ ( Array.from 'abcdefg' ), [ 1e6 .. 1e6 + 7 ], ]\n  #.........................................................................................................\n  pipeline = []\n  pipeline.push source\n  pipeline.push TBL.$tabulate()\n  pipeline.push $watch ( d ) -> echo d.text\n  pipeline.push $drain ( result ) -> resolve result\n  SP.pull pipeline...\n  resolve()\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@demo = ( T, done ) -> new Promise ( resolve ) =>\n  SP                        = require 'steampipes'\n  { $\n    $async\n    $watch\n    $show\n    $drain }                = SP.export()\n  #...........................................................................................................\n  TBL                 = ( require '../..' ).TBL\n  probes_and_matchers = [\n    [\n      [ ( Array.from 'abcdefg' ), [ 1e6 .. 1e6 + 7 ], ]\n      [ {\"text\":\"┌──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────┬──────────────┐\",\"$key\":\"^table\"},\n        {\"text\":\"│ 0            │ 1            │ 2            │ 3            │ 4            │ 5            │ 6            │\",\"$key\":\"^table\"},\n        {\"text\":\"├──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┼──────────────┤\",\"$key\":\"^table\"},\n        {\"text\":\"│ a            │ b            │ c            │ d            │ e            │ f            │ g            │\",\"$key\":\"^table\"},\n        {\"text\":\"│ 1000000      │ 1000001      │ 1000002      │ 1000003      │ 1000004      │ 1000005      │ 1000006      │\",\"$key\":\"^table\"},\n        {\"text\":\"└──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┴──────────────┘\",\"$key\":\"^table\"},\n        ], ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      pipeline = []\n      pipeline.push probe\n      pipeline.push TBL.$tabulate { width: 12, }\n      pipeline.push $watch ( d ) -> echo d.text\n      pipeline.push $drain ( result ) -> resolve result\n      SP.pull pipeline...\n  #.........................................................................................................\n  done() if done?\n  resolve()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"multiline text\" ] = ( T, done ) -> new Promise ( resolve ) =>\n  SP                        = require 'steampipes'\n  { $\n    $async\n    $watch\n    $show\n    $drain }                = SP.export()\n  #...........................................................................................................\n  TBL                 = ( require '../..' ).TBL\n  probes_and_matchers = [\n    [\n      [ { key: 1, value: \"helo\", }\n        { key: 2, value: \"world\", }\n        { key: 3, value: \"on\\nmultiple\\nlines\", }\n        ]\n      [ \"┌──────────────┬──────────────┐\"\n        \"│ key          │ value        │\"\n        \"├──────────────┼──────────────┤\"\n        \"│ 1            │ helo         │\"\n        \"│ 2            │ world        │\"\n        \"│ 3            │ on⏎multiple… │\"\n        \"└──────────────┴──────────────┘\" ] ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      pipeline = []\n      pipeline.push probe\n      pipeline.push TBL.$tabulate { multiline: false, width: 12, }\n      pipeline.push $ ( d, send ) -> send d.text\n      pipeline.push $watch ( d ) -> echo d\n      pipeline.push $drain ( result ) -> resolve result\n      SP.pull pipeline...\n  #.........................................................................................................\n  done() if done?\n  resolve()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"demo: autowidth\" ] = ( T, done ) -> new Promise ( resolve ) =>\n  SP                        = require 'steampipes'\n  { $\n    $async\n    $watch\n    $show\n    $drain }                = SP.export()\n  #...........................................................................................................\n  TBL                 = ( require '../..' ).TBL\n  probes_and_matchers = [\n    [\n      [ { key: 1, value: \"helo\", }\n        { key: 2, value: \"world\", }\n        { key: 3, value: \"on\\nmultiple\\nlines\", }\n        ]\n      null, ]\n    [\n      [ { key: 4, value: \"helo\",  extra: \"other\",         interesting: true, }\n        { key: 5, value: \"world\", extra: \"stuff\",         interesting: true, }\n        { key: 6, value: \"!\",     extra: \"goes in here\",  interesting: true, }\n        ]\n      null, ]\n    [\n      [ { key: 4, value: \"helo\",  extra: \"other\",         interesting: true, more: 4433, }\n        { key: 5, value: \"world\", extra: \"stuff\",         interesting: true, more: 3199, }\n        { key: 6, value: \"!\",     extra: \"goes in here\",  interesting: true, more: 1965, }\n        ]\n      null, ]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve ) ->\n      pipeline = []\n      pipeline.push probe\n      pipeline.push TBL.$tabulate { multiline: false, }\n      pipeline.push $ ( d, send ) -> send d.text\n      pipeline.push $watch ( d ) -> echo d\n      pipeline.push $drain ( result ) -> resolve null\n      SP.pull pipeline...\n  #.........................................................................................................\n  done() if done?\n  resolve()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"widths\" ] = ( T, done ) -> new Promise ( resolve ) =>\n  TBL                       = ( require '../..' ).TBL\n  SP                        = require 'steampipes'\n  { $\n    $async\n    $watch\n    $show\n    $drain }                = SP.export()\n  #...........................................................................................................\n  rows  = [\n    { key: 4, value: \"helo\",  extra: \"other\",         interesting: true, more: 4433, }\n    { key: 5, value: \"world\", extra: \"stuff\",         interesting: true, more: 3199, }\n    { key: 6, value: \"!\",     extra: \"goes in here\",  interesting: true, more: 1965, }\n    ]\n  settings =\n    # width:  7\n    widths: { key: 3, value: 7, extra: 15, }\n  #.........................................................................................................\n  doit = ->\n    pipeline = []\n    pipeline.push rows\n    pipeline.push TBL.$tabulate settings\n    pipeline.push $ ( d, send ) -> send d.text\n    pipeline.push $watch ( d ) -> echo d\n    pipeline.push $drain ( result ) -> resolve null\n    SP.pull pipeline...\n  #.........................................................................................................\n  await doit()\n  done() if done?\n  resolve()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"text representation\" ] = ( T, done ) -> new Promise ( resolve ) =>\n  TBL                       = ( require '../..' ).TBL\n  SP                        = require 'steampipes'\n  { $\n    $async\n    $watch\n    $show\n    $drain }                = SP.export()\n  #...........................................................................................................\n  rows  = [\n    { description: \"U+0000\", sample: \"x\\u{0000}x\", }\n    { description: \"U+0001\", sample: \"x\\u{0001}x\", }\n    { description: \"U+0002\", sample: \"x\\u{0002}x\", }\n    { description: \"U+0003\", sample: \"x\\u{0003}x\", }\n    { description: \"U+0004\", sample: \"x\\u{0004}x\", }\n    { description: \"U+0005\", sample: \"x\\u{0005}x\", }\n    { description: \"U+0006\", sample: \"x\\u{0006}x\", }\n    { description: \"U+0007\", sample: \"x\\u{0007}x\", }\n    { description: \"U+0008\", sample: \"x\\u{0008}x\", }\n    { description: \"U+0009\", sample: \"x\\u{0009}x\", }\n    { description: \"U+000a\", sample: \"x\\u{000a}x\", }\n    { description: \"U+000b\", sample: \"x\\u{000b}x\", }\n    { description: \"U+000c\", sample: \"x\\u{000c}x\", }\n    { description: \"U+000d\", sample: \"x\\u{000d}x\", }\n    { description: \"U+000e\", sample: \"x\\u{000e}x\", }\n    { description: \"U+000f\", sample: \"x\\u{000f}x\", }\n    { description: \"U+0010\", sample: \"x\\u{0010}x\", }\n    { description: \"U+0011\", sample: \"x\\u{0011}x\", }\n    { description: \"U+0012\", sample: \"x\\u{0012}x\", }\n    { description: \"U+0013\", sample: \"x\\u{0013}x\", }\n    { description: \"U+0014\", sample: \"x\\u{0014}x\", }\n    { description: \"U+0015\", sample: \"x\\u{0015}x\", }\n    { description: \"U+0016\", sample: \"x\\u{0016}x\", }\n    { description: \"U+0017\", sample: \"x\\u{0017}x\", }\n    { description: \"U+0018\", sample: \"x\\u{0018}x\", }\n    { description: \"U+0019\", sample: \"x\\u{0019}x\", }\n    { description: \"U+001a\", sample: \"x\\u{001a}x\", }\n    { description: \"U+001b\", sample: \"x\\u{001b}x\", }\n    { description: \"U+001c\", sample: \"x\\u{001c}x\", }\n    { description: \"U+001d\", sample: \"x\\u{001d}x\", }\n    { description: \"U+001e\", sample: \"x\\u{001e}x\", }\n    { description: \"U+001f\", sample: \"x\\u{001f}x\", }\n    { description: \"U+0020\", sample: \"x\\u{0020}x\", }\n    { description: \"newline\",     sample: 'x⏎x',     }\n    { description: \"empty text\",  sample: '',         }\n    { description: \"undefined\",   sample: undefined,  }\n    { description: \"null\",        sample: null,       }\n    { description: \"notanumber\",  sample: 4 * 'x',       }\n    { description: \"lime\",        sample: ( CND.lime 'Lime' ),       }\n    ]\n  #.........................................................................................................\n  matcher = [\n    \"┌──────────────┬──────────────┐\",\n    \"│ description  │ sample       │\",\n    \"├──────────────┼──────────────┤\",\n    \"│ U+0000       │ x␀x          │\",\n    \"│ U+0001       │ x␁x          │\",\n    \"│ U+0002       │ x␂x          │\",\n    \"│ U+0003       │ x␃x          │\",\n    \"│ U+0004       │ x␄x          │\",\n    \"│ U+0005       │ x␅x          │\",\n    \"│ U+0006       │ x␆x          │\",\n    \"│ U+0007       │ x␇x          │\",\n    \"│ U+0008       │ x␈x          │\",\n    \"│ U+0009       │ x␉x          │\",\n    \"│ U+000a       │ x⏎x          │\",\n    \"│ U+000b       │ x␋x          │\",\n    \"│ U+000c       │ x␌x          │\",\n    \"│ U+000d       │ x␍x          │\",\n    \"│ U+000e       │ x␎x          │\",\n    \"│ U+000f       │ x␏x          │\",\n    \"│ U+0010       │ x␐x          │\",\n    \"│ U+0011       │ x␑x          │\",\n    \"│ U+0012       │ x␒x          │\",\n    \"│ U+0013       │ x␓x          │\",\n    \"│ U+0014       │ x␔x          │\",\n    \"│ U+0015       │ x␕x          │\",\n    \"│ U+0016       │ x␖x          │\",\n    \"│ U+0017       │ x␗x          │\",\n    \"│ U+0018       │ x␘x          │\",\n    \"│ U+0019       │ x␙x          │\",\n    \"│ U+001a       │ x␚x          │\",\n    \"│ U+001b       │ x␛x          │\",\n    \"│ U+001c       │ x␜x          │\",\n    \"│ U+001d       │ x␝x          │\",\n    \"│ U+001e       │ x␞x          │\",\n    \"│ U+001f       │ x␟x          │\",\n    \"│ U+0020       │ x x          │\",\n    \"│ newline      │ x⏎x          │\",\n    \"│ empty text   │ ''           │\",\n    \"│ undefined    │ ○            │\",\n    \"│ null         │ ●            │\",\n    \"│ notanumber   │ NaN          │\",\n    \"│ lime         │ \\u001b[38;05;118mLime\\u001b[0m         │\",\n    \"└──────────────┴──────────────┘\"]\n  #.........................................................................................................\n  result = null\n  await do => new Promise ( resolve ) =>\n    pipeline = []\n    pipeline.push rows\n    pipeline.push TBL.$tabulate { width: 12, }\n    pipeline.push $ ( d, send ) -> send d.text\n    pipeline.push $watch ( d ) -> echo d\n    pipeline.push $drain ( result_ ) -> urge jr result_; result = result_; resolve()\n    SP.pull pipeline...\n  #.........................................................................................................\n  T.eq result, matcher\n  done() if done?\n  resolve()\n  return null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await @_xxx_kw_demo()\n  test @\n  # test @[ \"demo\" ]\n  # for cid in [ 0 .. 32 ]\n  #   debug ( cid.toString 16 ).padStart 4, '0'\n\n\n\n\n"
  ]
}